{
  "swagger": "2.0",
  "info": {
    "title": "2016 HMIS API",
    "version": "1.0.0"
  },
  "securityDefinitions": {
    "oauth_2_0": {
      "type": "oauth2",
      "description": "The HMIS API supports OAuth 2.0 for authenticating all API requests.\n",
      "tokenUrl": "https://hmislynk.com/hmis-authorization-service/rest/token",
      "scopes": {
        "user": "",
        "administrator": ""
      },
      "flow": "password"
    }
  },
  "paths": {
    "/v2016/clients": {
      "get": {
        "description": "Searches for client.  Returns a list of client ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/clients_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a client\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clients_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_clients_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}": {
      "get": {
        "description": "Gets a client using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/clients_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific client specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clients_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific client specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments": {
      "get": {
        "description": "Searches for enrollment.  Returns a list of enrollment ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/enrollments_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add an enrollment\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/enrollments_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_enrollments_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}": {
      "get": {
        "description": "Gets a enrollment using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/enrollment_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific enrollment specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/enrollments_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific enrollment specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/enrollmentcocs": {
      "get": {
        "description": "Searches for enrollmentcoc.  Returns a list of enrollmentcoc ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/enrollmentcoc_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a enrollmentcoc\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/enrollmentcoc_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_enrollmentcoc_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/enrollmentcocs/{enrollmentcocid}": {
      "get": {
        "description": "Gets a enrollmentcoc using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/enrollmentcoc_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentcocid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific enrollmentcoc specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentcocid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/enrollmentcoc_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific enrollmentcoc specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentcocid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/educations": {
      "get": {
        "description": "Searches for education.  Returns a list of education ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/education_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a education\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/education_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_education_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/educations/{educationid}": {
      "get": {
        "description": "Gets a education using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/education_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "educationid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific education specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "educationid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/education_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific education specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "educationid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/contacts": {
      "get": {
        "description": "Searches for contact.  Returns a list of contact ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/contact_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a contact\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contact_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_contact_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/contacts/{contactid}": {
      "get": {
        "description": "Gets a contact using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/contact_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "contactid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific contact specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "contactid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contact_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific contact specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "contactid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/dateofengagements": {
      "get": {
        "description": "Searches for dateofengagement.  Returns a list of dateofengagement ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/dateofengagements_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a dateofengagement\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dateofengagements_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_dateofengagements_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/dateofengagements/{dateofengagementsid}": {
      "get": {
        "description": "Gets a dateofengagement using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/dateofengagements_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "dateofengagementsid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific dateofengagement specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "dateofengagementsid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dateofengagements_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific dateofengagement specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "dateofengagementsid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/disabilities": {
      "get": {
        "description": "Searches for disability.  Returns a list of disability ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/disabilities_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a disability\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/disabilities_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_disabilities_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/disabilities/{disabilitiesid}": {
      "get": {
        "description": "Gets a disability using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/disabilities_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "disabilitiesid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific disability specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "disabilitiesid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/disabilities_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific disability specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "disabilitiesid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/domesticviolences": {
      "get": {
        "description": "Searches for domesticviolence.  Returns a list of domesticviolence ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/domesticviolence_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a domesticviolence\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/domesticviolence_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_domesticviolences_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/domesticviolences/{domesticviolenceid}": {
      "get": {
        "description": "Gets a domesticviolence using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/domesticviolence_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "domesticviolenceid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific domesticviolence specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "domesticviolenceid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/domesticviolence_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific domesticviolence specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "domesticviolenceid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/employments": {
      "get": {
        "description": "Searches for employment.  Returns a list of employment ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/employments_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a employment\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/employments_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_employments_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/employments/{employmentsid}": {
      "get": {
        "description": "Gets a employment using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/employment_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "employmentsid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific employment specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "employmentsid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/employments_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific employment specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "employmentsid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/exits": {
      "get": {
        "description": "Searches for exit.  Returns a list of exit ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/exit_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a exit\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/exit_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_exits_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitsid}": {
      "get": {
        "description": "Gets a exit using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/exit_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitsid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific exit specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitsid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/exit_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific exit specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitsid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitsid}/exithousingassesments": {
      "get": {
        "description": "Searches for exithousingassesment.  Returns a list of exithousingassesment ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/exithosingassessments_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a exithousingassesment\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitsid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/exithosingassessments_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_exithousingassesment_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitsid}/exithousingassesments/{exithousingassesmentid}": {
      "get": {
        "description": "Gets a exithousingassesment using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/exithosingassessments_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "exithousingassesmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitsid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific exithousingassesment specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "exithousingassesmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitsid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/exithosingassessments_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific exithousingassesment specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "exithousingassesmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitsid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitsid}/housingassesmentdispositions": {
      "get": {
        "description": "Searches for housingassesmentdisposition.  Returns a list of housingassesmentdisposition ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/housingassesmentdispositions_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a housingassesmentdisposition\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitsid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/housingassesmentdispositions_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_housingassesmentdispositions_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitsid}/housingassesmentdispositions/{housingassesmentdispositionid}": {
      "get": {
        "description": "Gets a housingassesmentdisposition using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/housingassesmentdispositions_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "housingassesmentdispositionid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitsid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific housingassesmentdisposition specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "housingassesmentdispositionid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitsid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/housingassesmentdispositions_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific housingassesmentdisposition specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "housingassesmentdispositionid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitsid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/heathinsurances": {
      "get": {
        "description": "Searches for heathinsurance.  Returns a list of heathinsurance ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/healthinsurances_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a heathinsurance\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/healthinsurance_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_healthinsurance_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/heathinsurances/{healthinsuranceid}": {
      "get": {
        "description": "Gets a heathinsurance using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/healthinsurance_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "healthinsuranceid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific heathinsurance specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "healthinsuranceid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/healthinsurance_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific heathinsurance specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "healthinsuranceid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/healthstatuses": {
      "get": {
        "description": "Searches for healthstatus.  Returns a list of healthstatus ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/healthstatus_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a healthstatus\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/healthstatus_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_healthstatus_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/healthstatuses/{healthstatusid}": {
      "get": {
        "description": "Gets a healthstatus using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/healthstatus_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "healthstatusid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific healthstatus specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "healthstatusid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/healthstatus_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific healthstatus specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "healthstatusid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/incomeandsources": {
      "get": {
        "description": "Searches for incomeandsource.  Returns a list of incomeandsource ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/incomeandsources_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a incomeandsource\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/incomeandsource_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_incomeandsources_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/incomeandsources/{incomeandsourcesid}": {
      "get": {
        "description": "Gets a incomeandsource using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/incomeandsource_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "incomeandsourcesid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific incomeandsource specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "incomeandsourcesid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/incomeandsource_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific incomeandsource specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "incomeandsourcesid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/medicalassistences": {
      "get": {
        "description": "Searches for medicalassistence.  Returns a list of medicalassistence ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/medicalassistances_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a medicalassistence\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/medicalassistance_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_medicalassistances_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/medicalassistences/{medicalassistancesid}": {
      "get": {
        "description": "Gets a medicalassistence using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/medicalassistances_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "medicalassistancesid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific medicalassistence specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "medicalassistancesid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/medicalassistance_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific medicalassistence specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "medicalassistancesid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/noncashbenefits": {
      "get": {
        "description": "Searches for noncashbenefit.  Returns a list of noncashbenefit ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/noncashbenefits_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a noncashbenefit\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/noncashbenefits_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_noncashbenefits_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/noncashbenefits/{noncashbenefitsid}": {
      "get": {
        "description": "Gets a noncashbenefit using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/noncashbenefits_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "noncashbenefitsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific noncashbenefit specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "noncashbenefitsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/noncashbenefits_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific noncashbenefit specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "noncashbenefitsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/residentialmoveindates": {
      "get": {
        "description": "Searches for residentialmoveindate.  Returns a list of residentialmoveindate ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/residentialmoveindate_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a residentialmoveindate\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/residentialmoveindate_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_residentialmoveindate_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/residentialmoveindates/{residentialmoveindatesid}": {
      "get": {
        "description": "Gets a residentialmoveindate using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/residentialmoveindate_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "residentialmoveindatesid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific residentialmoveindate specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "residentialmoveindatesid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/residentialmoveindate_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific residentialmoveindate specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "residentialmoveindatesid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/pathstatuses": {
      "get": {
        "description": "Searches for pathstatus.  Returns a list of pathstatus ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/pathstatus_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a pathstatus\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pathstatus_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_pathstatus_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/pathstatuses/{pathstatusid}": {
      "get": {
        "description": "Gets a pathstatus using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/pathstatus_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "pathstatusid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific pathstatus specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "pathstatusid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pathstatus_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific pathstatus specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "pathstatusid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/entryrhsps": {
      "get": {
        "description": "Searches for entryrhsp.  Returns a list of entryrhsp ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/entryrhsp_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a entryrhsp\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entryrhsp_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_entryrhsp_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/entryrhsps/{entryrhspid}": {
      "get": {
        "description": "Gets a entryrhsp using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/entryrhsp_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "entryrhspid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific entryrhsp specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "entryrhspid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entryrhsp_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific entryrhsp specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "entryrhspid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/entryrhys": {
      "get": {
        "description": "Searches for entryrhy.  Returns a list of entryrhy ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/entryrhy_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a entryrhy\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entryrhy_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_entryrhy_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/entryrhys/{entryrhyid}": {
      "get": {
        "description": "Gets a entryrhy using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/entryrhy_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "entryrhyid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific entryrhy specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "entryrhyid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entryrhy_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific entryrhy specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "entryrhyid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/entryssvfs": {
      "get": {
        "description": "Searches for entryssvf.  Returns a list of entryssvf ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/entryssvf_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a entryssvf\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entryssvf_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_entryssvf_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/entryssvfs/{entryssvfid}": {
      "get": {
        "description": "Gets a entryssvf using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/entryssvf_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "entryssvfid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific entryssvf specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "entryssvfid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/entryssvf_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific entryssvf specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "entryssvfid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitpaths": {
      "get": {
        "description": "Searches for exitpath.  Returns a list of exitpath ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/exitpath_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a exitpath\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/exitpath_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_exitpath_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitpaths/{exitpathid}": {
      "get": {
        "description": "Gets a exitpath using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/id_exitpath_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "exitpathid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific exitpath specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "exitpathid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/exitpath_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific exitpath specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "exitpathid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitrhys": {
      "get": {
        "description": "Searches for exitrhy.  Returns a list of exitrhy ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/exitrhy_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a exitrhy\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/exitrhy_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_exitrhy_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitrhys/{exitrhyid}": {
      "get": {
        "description": "Gets a exitrhy using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/exitrhy_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "exitrhyid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific exitrhy specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "exitrhyid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/exitrhy_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific exitrhy specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "exitrhyid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "exitid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/servicefareferrals": {
      "get": {
        "description": "Searches for servicefareferral.  Returns a list of servicefareferral ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/servicefareferrals_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a servicefareferral\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicefareferral_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_servicefareferral_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/enrollments/{enrollmentid}/servicefareferrals/{servicefareferralid}": {
      "get": {
        "description": "Gets a servicefareferral using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/servicefareferral_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "servicefareferralid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific servicefareferral specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "servicefareferralid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/servicefareferral_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific servicefareferral specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "servicefareferralid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "enrollmentid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/clients/{clientid}/veteraninfos": {
      "get": {
        "description": "Searches for veteraninfo.  Returns a list of veteraninfo ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/veteraninfo_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a veteraninfo\n",
        "parameters": [
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/veteraninfo_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_veteraninfo_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/clients/{clientid}/veteraninfos/{veteraninfoid}": {
      "get": {
        "description": "Gets a veteraninfo using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/veteraninfo_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "veteraninfoid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific veteraninfo specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "veteraninfoid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/veteraninfo_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific veteraninfo specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "veteraninfoid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "clientid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/projects": {
      "get": {
        "description": "Searches for project.  Returns a list of project ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/projects_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a project\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/project_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_projects_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/projects/{projectsid}": {
      "get": {
        "description": "Gets a project using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/projects_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific project specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/project_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific project specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/projects/{projectsid}/projectcocs": {
      "get": {
        "description": "Searches for projectcoc.  Returns a list of projectcoc ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/projectcoc_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a projectcoc\n",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/projectcoc_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_projectcoc_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/projects/{projectsid}/projectcocs/{projectcocid}": {
      "get": {
        "description": "Gets a projectcoc using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/projectcoc_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "projectcocid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific projectcoc specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "projectcocid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/projectcoc_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific projectcoc specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "projectcocid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/projects/{projectsid}/inventories": {
      "get": {
        "description": "Searches for inventory.  Returns a list of inventory ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/inventories_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a inventory\n",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/inventories_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_inventories_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/projects/{projectsid}/inventories/{inventoriesid}": {
      "get": {
        "description": "Gets a inventory using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/inventories_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "inventoriesid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific inventory specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "inventoriesid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/inventories_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific inventory specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "inventoriesid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/projects/{projectsid}/sites": {
      "get": {
        "description": "Searches for site.  Returns a list of site ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/sites_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a site\n",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sites_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_sites_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/projects/{projectsid}/sites/{sitesid}": {
      "get": {
        "description": "Gets a site using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/sites_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "sitesid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific site specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "sitesid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sites_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific site specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "sitesid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/projects/{projectsid}/funders": {
      "get": {
        "description": "Searches for funder.  Returns a list of funder ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/funders_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a funder\n",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/funders_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_funders_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/projects/{projectsid}/funders/{fundersid}": {
      "get": {
        "description": "Gets a funder using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/funder_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "fundersid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific funder specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "fundersid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/funders_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific funder specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "fundersid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/projects/{projectsid}/affiliations": {
      "get": {
        "description": "Searches for affiliation.  Returns a list of affiliation ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/affiliations_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a affiliation\n",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/affiliations_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_affiliation_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/projects/{projectsid}/affiliations/{affiliationid}": {
      "get": {
        "description": "Gets a affiliation using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/affiliation_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "affiliationid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific affiliation specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "affiliationid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/affiliations_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific affiliation specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "projectsid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "affiliationid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/v2016/organizations": {
      "get": {
        "description": "Searches for organization.  Returns a list of organization ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.",
        "parameters": [
          {
            "type": "string",
            "format": "date",
            "name": "CreatedAfter",
            "in": "query",
            "description": "searches for members of the collection created after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "CreatedBefore",
            "in": "query",
            "description": "searches for members of the collection created before (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedAfter",
            "in": "query",
            "description": "searches for members of the collection updated after (inclusive) a particular date"
          },
          {
            "type": "string",
            "format": "date",
            "name": "UpdatedBefore",
            "in": "query",
            "description": "searches for members of the collection updated before (inclusive) a particular date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/organization_ids_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "500 – Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Add a organization\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/organization_json"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK - New resource has been created.",
            "schema": {
              "$ref": "#/definitions/id_organization_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "422": {
            "description": "Unprocessable Entity - Request body is incorrect."
          },
          "500": {
            "description": "500 – Internal Server Error."
          }
        }
      }
    },
    "/v2016/organizations/{organizationid}": {
      "get": {
        "description": "Gets a organization using a URI resource parameter/ID.",
        "responses": {
          "200": {
            "description": "OK – Everything is working.",
            "schema": {
              "$ref": "#/definitions/organization_id_json"
            }
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires an user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "organizationid",
            "in": "path",
            "required": true
          }
        ]
      },
      "put": {
        "description": "Updates a specific organization specified by the URI resource parameter/ID.",
        "parameters": [
          {
            "type": "string",
            "name": "organizationid",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/organization_json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK – Everything is working."
          },
          "304": {
            "description": "Not Modified – The client can use cached data."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires a user."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "delete": {
        "description": "Deletes a specific organization specified by the URI resource parameter/ID.",
        "responses": {
          "204": {
            "description": "OK – The resource was successfully deleted."
          },
          "400": {
            "description": "Bad Request – The request was invalid or cannot be served."
          },
          "401": {
            "description": "Unauthorized – The request requires user authentication."
          },
          "403": {
            "description": "Forbidden – The server understood the request, but is refusing it or the access is not allowed."
          },
          "404": {
            "description": "Not found – There is no resource behind the URI."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "type": "string",
            "name": "organizationid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/search/{searchentity}": {
      "get": {
        "description": "The Search API is optimized to find the specific entity you're looking for (e.g., a client, enrollments, etc.).It's designed to  find the one result you're looking for (or maybe the few results you're looking for). Currently hmislynk supporting search on 'clients' entity only. Just like searching on Google, you sometimes want to see a few pages of search results so that you can find the item that best meets your needs.  HMISLynk Search API provides up to 50 results for each searh. However, the search results can be limited by the client.\n  Note: Current supporting URI  is /search/clients\n  \n",
        "parameters": [
          {
            "type": "string",
            "name": "searchentity",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "q",
            "in": "query",
            "description": "The search keywords, as well as any qualifiers. Currently supported search fields are first name,middle name,last name,dob,source system id and ssn. For search on \"date of birth\" field the format MM-dd-YYYY should be used for the search keyword. \n"
          },
          {
            "type": "string",
            "name": "sort",
            "in": "query",
            "description": "The sort field. Default- results are sorted by \"created date\"."
          },
          {
            "type": "string",
            "default": "desc",
            "name": "order",
            "in": "query",
            "description": "The sort order if sort parameter is provided. One of asc or desc. Default- desc."
          },
          {
            "type": "integer",
            "default": 0,
            "name": "startIndex",
            "in": "query",
            "description": "The start Index from where the search results should be returned. Default - 0"
          },
          {
            "type": "integer",
            "default": 50,
            "name": "maxItems",
            "in": "query",
            "description": "the number or Items that should be included in the results . Default - 50"
          },
          {
            "type": "string",
            "name": "exclude",
            "in": "query",
            "description": "Excludes flieds from the search.Currently it suppoted value is \"ssi\" (to exclude         source system id) only.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "example: |\n  {\n  \"searchResults\": {\n    \"pagination\": {\n      \"total\":\"2\"\n      \"from\": \"0\",\n      \"maximum\": \"50\",\n      \"returned\":\"2\"\n    },\n    \"items\": [\n      {\n        \"clientId\": \"65e3df62-dd22-4d07-83ef-6858a6322839\",\n        \"firstName\": \"Eric\",\n        \"middleName\": \"Eric\",\n        \"lastName\": \"Eric\",\n        \"nameSuffix\": \"NS \",\n        \"nameDataQuality\": \"1\",\n        \"ssn\": \"ssn \",\n        \"ssnDataQuality\": \"1\",\n        \"dob\": \"1459498034983\",\n        \"dobDataQuality\": \"1\",\n        \"race\": \"1\",\n        \"ethnicity\": \"1\",\n        \"gender\": \"1\",\n        \"otherGender\": \"Test\",\n        \"veteranStatus\": \"8\",\n        \"link\":\"/hmis-clientapi/rest/v2016/clients/65e3df62-dd22-4d07-83ef-6858a6322839\"\n      },\n      {\n        \"clientId\": \"cf98b9b2-9a77-4133-99a3-b60f05a12ad1\",\n        \"firstName\": \"Eric\",\n        \"middleName\": \"Eric\",\n        \"lastName\": \"Eric\",\n        \"nameSuffix\": \"NS \",\n        \"nameDataQuality\": \"1\",\n        \"ssn\": \"ssn \",\n        \"ssnDataQuality\": \"1\",\n        \"dob\": \"1459498034983\",\n        \"dobDataQuality\": \"1\",\n        \"race\": \"1\",\n        \"ethnicity\": \"1\",\n        \"gender\": \"1\",\n        \"otherGender\": \"Test\",\n        \"veteranStatus\": \"8\",\n        \"link\":\"/hmis-clientapi/rest/v2014/clients/cf98b9b2-9a77-4133-99a3-b60f05a12ad1\"\n      }\n    ]\n  }\n  }\n            "
          }
        }
      }
    }
  },
  "definitions": {
    "affiliation_id_json": {
      "type": "object",
      "properties": {
        "affiliation": {
          "id": "affiliation",
          "type": "object",
          "properties": {
            "affiliationId": {
              "id": "affiliationId",
              "type": "string"
            },
            "resprojectid": {
              "id": "resprojectid",
              "type": "string"
            },
            "dateCreated": {
              "id": "dateCreated",
              "type": "string"
            },
            "dateUpdated": {
              "id": "dateUpdated",
              "type": "string"
            }
          },
          "required": [
            "affiliationId",
            "resprojectid",
            "dateCreated",
            "dateUpdated"
          ]
        }
      },
      "required": [
        "affiliation"
      ]
    },
    "affiliations_ids_json": {
      "type": "object",
      "properties": {
        "affiliations": {
          "id": "affiliations",
          "type": "object",
          "properties": {
            "pagination": {
              "id": "pagination",
              "type": "object",
              "properties": {
                "from": {
                  "id": "from",
                  "type": "integer"
                },
                "returned": {
                  "id": "returned",
                  "type": "integer"
                },
                "total": {
                  "id": "total",
                  "type": "integer"
                },
                "maximum": {
                  "id": "maximum",
                  "type": "integer"
                },
                "sort": {
                  "id": "sort",
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "affiliations": {
              "id": "affiliations",
              "type": "array",
              "items": {
                "id": "0",
                "type": "object",
                "properties": {
                  "affiliationId": {
                    "id": "affiliationId",
                    "type": "string"
                  },
                  "resprojectid": {
                    "id": "resprojectid",
                    "type": "string"
                  },
                  "dateCreated": {
                    "id": "dateCreated",
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": [
            "pagination",
            "affiliations",
            "0"
          ]
        }
      },
      "required": [
        "affiliations"
      ]
    },
    "affiliations_json": {
      "type": "object",
      "properties": {
        "affiliation": {
          "id": "affiliation",
          "type": "object",
          "properties": {
            "resprojectid": {
              "id": "resprojectid",
              "type": "string"
            }
          },
          "required": [
            "resprojectid"
          ]
        }
      },
      "required": [
        "affiliation"
      ]
    },
    "client_id_json": {
      "type": "object",
      "properties": {
        "Clients": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "clients": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "middleName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "nameSuffix": {
                    "type": "string"
                  },
                  "nameDataQuality": {
                    "type": "integer"
                  },
                  "ssn": {
                    "type": "string"
                  },
                  "ssnDataQuality": {
                    "type": "integer"
                  },
                  "dob": {
                    "type": "integer"
                  },
                  "dobDataQuality": {
                    "type": "integer"
                  },
                  "race": {
                    "type": "integer"
                  },
                  "ethnicity": {
                    "type": "integer"
                  },
                  "gender": {
                    "type": "integer"
                  },
                  "otherGender": {
                    "type": "string"
                  },
                  "veteranStatus": {
                    "type": "string"
                  },
                  "phoneNumber": {
                    "id": "phoneNumber",
                    "type": "string"
                  },
                  "emailAddress": {
                    "id": "emailAddress",
                    "type": "string"
                  }
                },
                "required": [
                  "clientId",
                  "firstName",
                  "middleName",
                  "lastName",
                  "nameSuffix",
                  "nameDataQuality",
                  "ssn",
                  "ssnDataQuality",
                  "dob",
                  "dobDataQuality",
                  "race",
                  "ethnicity",
                  "gender",
                  "otherGender",
                  "veteranStatus",
                  "phoneNumber",
                  "emailAddress"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "clients"
          ]
        }
      },
      "required": [
        "Clients"
      ]
    },
    "clients_ids_json": {
      "type": "object",
      "properties": {
        "Clients": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "clients": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "middleName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "nameSuffix": {
                    "type": "string"
                  },
                  "nameDataQuality": {
                    "type": "integer"
                  },
                  "ssn": {
                    "type": "string"
                  },
                  "ssnDataQuality": {
                    "type": "integer"
                  },
                  "dob": {
                    "type": "integer"
                  },
                  "dobDataQuality": {
                    "type": "integer"
                  },
                  "race": {
                    "type": "integer"
                  },
                  "ethnicity": {
                    "type": "integer"
                  },
                  "gender": {
                    "type": "integer"
                  },
                  "otherGender": {
                    "type": "string"
                  },
                  "veteranStatus": {
                    "type": "string"
                  },
                  "phoneNumber": {
                    "id": "phoneNumber",
                    "type": "string"
                  },
                  "emailAddress": {
                    "id": "emailAddress",
                    "type": "string"
                  }
                },
                "required": [
                  "clientId",
                  "firstName",
                  "middleName",
                  "lastName",
                  "nameSuffix",
                  "nameDataQuality",
                  "ssn",
                  "ssnDataQuality",
                  "dob",
                  "dobDataQuality",
                  "race",
                  "ethnicity",
                  "gender",
                  "otherGender",
                  "veteranStatus",
                  "phoneNumber",
                  "emailAddress"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "clients"
          ]
        }
      },
      "required": [
        "Clients"
      ]
    },
    "clients_json": {
      "type": "object",
      "properties": {
        "client": {
          "type": "object",
          "properties": {
            "firstName": {
              "type": "string"
            },
            "middleName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "nameSuffix": {
              "type": "string"
            },
            "nameDataQuality": {
              "type": "integer"
            },
            "ssn": {
              "type": "string"
            },
            "ssnDataQuality": {
              "type": "integer"
            },
            "dob": {
              "type": "integer"
            },
            "dobDataQuality": {
              "type": "integer"
            },
            "race": {
              "type": "integer"
            },
            "ethnicity": {
              "type": "integer"
            },
            "gender": {
              "type": "integer"
            },
            "otherGender": {
              "type": "string"
            },
            "veteranStatus": {
              "type": "integer"
            },
            "phoneNumber": {
              "id": "phoneNumber",
              "type": "string"
            },
            "emailAddress": {
              "id": "emailAddress",
              "type": "string"
            }
          },
          "required": [
            "firstName",
            "middleName",
            "lastName",
            "nameSuffix",
            "nameDataQuality",
            "ssn",
            "ssnDataQuality",
            "dob",
            "dobDataQuality",
            "race",
            "ethnicity",
            "gender",
            "otherGender",
            "veteranStatus",
            "phoneNumber",
            "emailAddress"
          ]
        }
      },
      "required": [
        "client"
      ]
    },
    "contact_id_json": {
      "type": "object",
      "properties": {
        "contact": {
          "type": "object",
          "properties": {
            "contactId": {
              "type": "string"
            },
            "contactLocation": {
              "type": "integer"
            }
          },
          "required": [
            "contactId",
            "contactLocation"
          ]
        }
      },
      "required": [
        "contact"
      ]
    },
    "contact_ids_json": {
      "type": "object",
      "properties": {
        "contacts": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "contacts": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "contactId": {
                    "type": "string"
                  },
                  "contactLocation": {
                    "type": "integer"
                  }
                },
                "required": [
                  "contactId",
                  "contactLocation"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "contacts"
          ]
        }
      },
      "required": [
        "contacts"
      ]
    },
    "contact_json": {
      "type": "object",
      "properties": {
        "contact": {
          "type": "object",
          "properties": {
            "contactLocation": {
              "type": "integer"
            }
          },
          "required": [
            "contactLocation"
          ]
        }
      },
      "required": [
        "contact"
      ]
    },
    "dateofengagements_id_json": {
      "type": "object",
      "properties": {
        "dateofengagement": {
          "id": "http://jsonschema.net/dateofengagement",
          "type": "object",
          "properties": {
            "dateofengagementId": {
              "id": "http://jsonschema.net/dateofengagement/dateofengagementId",
              "type": "string"
            },
            "dateofengagement": {
              "id": "http://jsonschema.net/dateofengagement/dateofengagement",
              "type": "string"
            }
          },
          "required": [
            "dateofengagementId",
            "dateofengagement"
          ]
        }
      },
      "required": [
        "dateofengagement"
      ]
    },
    "dateofengagements_ids_json": {
      "type": "object",
      "properties": {
        "dateofengagements": {
          "id": "http://jsonschema.net/dateofengagements",
          "type": "object",
          "properties": {
            "pagination": {
              "id": "http://jsonschema.net/dateofengagements/pagination",
              "type": "object",
              "properties": {
                "from": {
                  "id": "http://jsonschema.net/dateofengagements/pagination/from",
                  "type": "integer"
                },
                "returned": {
                  "id": "http://jsonschema.net/dateofengagements/pagination/returned",
                  "type": "integer"
                },
                "total": {
                  "id": "http://jsonschema.net/dateofengagements/pagination/total",
                  "type": "integer"
                },
                "maximum": {
                  "id": "http://jsonschema.net/dateofengagements/pagination/maximum",
                  "type": "integer"
                },
                "sort": {
                  "id": "http://jsonschema.net/dateofengagements/pagination/sort",
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "dateofengagements": {
              "id": "http://jsonschema.net/dateofengagements/dateofengagements",
              "type": "array",
              "items": {
                "id": "http://jsonschema.net/dateofengagements/dateofengagements/0",
                "type": "object",
                "properties": {
                  "dateofengagementId": {
                    "id": "http://jsonschema.net/dateofengagements/dateofengagements/0/dateofengagementId",
                    "type": "string"
                  },
                  "dateofengagement": {
                    "id": "http://jsonschema.net/dateofengagements/dateofengagements/0/dateofengagement",
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": [
            "pagination",
            "dateofengagements"
          ]
        }
      },
      "required": [
        "dateofengagements"
      ]
    },
    "dateofengagements_json": {
      "type": "object",
      "properties": {
        "dateofengagement": {
          "id": "dateofengagement",
          "type": "object",
          "properties": {
            "dateofengagement": {
              "id": "dateofengagement",
              "type": "string"
            }
          },
          "required": [
            "dateofengagement"
          ]
        }
      },
      "required": [
        "dateofengagement"
      ]
    },
    "disabilities_id_json": {
      "type": "object",
      "properties": {
        "disabilities": {
          "type": "object",
          "properties": {
            "disabilitiesId": {
              "type": "string"
            },
            "disabilitytype": {
              "type": "integer"
            },
            "disabilityresponse": {
              "type": "integer"
            },
            "indefiniteandimpairs": {
              "type": "integer"
            },
            "documentationonfile": {
              "type": "integer"
            },
            "receivingservices": {
              "type": "integer"
            },
            "pathhowconfirmed": {
              "type": "integer"
            },
            "pathsmiinformation": {
              "type": "integer"
            },
            "tcellcountavailable": {
              "type": "integer"
            },
            "tcellcount": {
              "type": "integer"
            },
            "tcellcountsource": {
              "type": "string"
            },
            "viralLoadAvailable": {
              "type": "integer"
            },
            "viralLoad": {
              "type": "integer"
            },
            "viralLoadSource": {
              "type": "string"
            },
            "informationDate": {
              "type": "string"
            }
          },
          "required": [
            "disabilitiesId",
            "disabilitytype",
            "disabilityresponse",
            "indefiniteandimpairs",
            "documentationonfile",
            "receivingservices",
            "pathhowconfirmed",
            "pathsmiinformation",
            "tcellcountavailable",
            "tcellcount",
            "tcellcountsource",
            "viralLoadAvailable",
            "viralLoad",
            "viralLoadSource",
            "informationDate"
          ]
        }
      },
      "required": [
        "disabilities"
      ]
    },
    "disabilities_ids_json": {
      "type": "object",
      "properties": {
        "disabilitiesList": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "disabilitiesList": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "disabilitiesId": {
                    "type": "string"
                  },
                  "disabilitytype": {
                    "type": "integer"
                  },
                  "disabilityresponse": {
                    "type": "integer"
                  },
                  "indefiniteandimpairs": {
                    "type": "integer"
                  },
                  "documentationonfile": {
                    "type": "integer"
                  },
                  "receivingservices": {
                    "type": "integer"
                  },
                  "pathhowconfirmed": {
                    "type": "integer"
                  },
                  "pathsmiinformation": {
                    "type": "integer"
                  },
                  "tcellcountavailable": {
                    "type": "integer"
                  },
                  "tcellcount": {
                    "type": "integer"
                  },
                  "tcellcountsource": {
                    "type": "string"
                  },
                  "viralLoadAvailable": {
                    "type": "integer"
                  },
                  "viralLoad": {
                    "type": "integer"
                  },
                  "viralLoadSource": {
                    "type": "string"
                  },
                  "informationDate": {
                    "type": "string"
                  }
                },
                "required": [
                  "disabilitiesId",
                  "disabilitytype",
                  "disabilityresponse",
                  "indefiniteandimpairs",
                  "documentationonfile",
                  "receivingservices",
                  "pathhowconfirmed",
                  "pathsmiinformation",
                  "tcellcountavailable",
                  "tcellcount",
                  "tcellcountsource",
                  "viralLoadAvailable",
                  "viralLoad",
                  "viralLoadSource",
                  "informationDate"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "disabilitiesList"
          ]
        }
      },
      "required": [
        "disabilitiesList"
      ]
    },
    "disabilities_json": {
      "type": "object",
      "properties": {
        "disabilities": {
          "type": "object",
          "properties": {
            "disabilitytype": {
              "type": "integer"
            },
            "disabilityresponse": {
              "type": "integer"
            },
            "documentationonfile": {
              "type": "integer"
            },
            "indefiniteandimpairs": {
              "type": "integer"
            },
            "pathhowconfirmed": {
              "type": "integer"
            },
            "receivingservices": {
              "type": "integer"
            },
            "pathsmiinformation": {
              "type": "integer"
            },
            "tcellcountavailable": {
              "type": "integer"
            },
            "tcellcount": {
              "type": "integer"
            },
            "tcellcountsource": {
              "type": "integer"
            },
            "viralLoadAvailable": {
              "type": "integer"
            },
            "viralLoad": {
              "type": "integer"
            },
            "viralLoadSource": {
              "type": "string"
            },
            "informationDate": {
              "type": "string"
            }
          },
          "required": [
            "disabilitytype",
            "disabilityresponse",
            "documentationonfile",
            "indefiniteandimpairs",
            "pathhowconfirmed",
            "receivingservices",
            "pathsmiinformation",
            "tcellcountavailable",
            "tcellcount",
            "tcellcountsource",
            "viralLoadAvailable",
            "viralLoad",
            "viralLoadSource",
            "informationDate"
          ]
        }
      },
      "required": [
        "disabilities"
      ]
    },
    "domesticviolence_id_json": {
      "type": "object",
      "properties": {
        "domesticviolence": {
          "type": "object",
          "properties": {
            "domesticviolenceId": {
              "type": "string"
            },
            "domesticviolencevictim": {
              "type": "integer"
            },
            "whenoccurred": {
              "type": "integer"
            },
            "currentlyFleeing": {
              "type": "integer"
            }
          },
          "required": [
            "domesticviolenceId",
            "domesticviolencevictim",
            "whenoccurred",
            "currentlyFleeing"
          ]
        }
      },
      "required": [
        "domesticviolence"
      ]
    },
    "domesticviolence_ids_json": {
      "type": "object",
      "properties": {
        "domesticviolences": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "domesticviolences": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "domesticviolenceId": {
                    "type": "string"
                  },
                  "domesticviolencevictim": {
                    "type": "integer"
                  },
                  "whenoccurred": {
                    "type": "integer"
                  },
                  "currentlyFleeing": {
                    "type": "integer"
                  }
                },
                "required": [
                  "domesticviolenceId",
                  "domesticviolencevictim",
                  "whenoccurred",
                  "currentlyFleeing"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "domesticviolences"
          ]
        }
      },
      "required": [
        "domesticviolences"
      ]
    },
    "domesticviolence_json": {
      "type": "object",
      "properties": {
        "domesticviolence": {
          "type": "object",
          "properties": {
            "domesticviolencevictim": {
              "type": "integer"
            },
            "whenoccurred": {
              "type": "integer"
            },
            "currentlyFleeing": {
              "type": "integer"
            }
          },
          "required": [
            "domesticviolencevictim",
            "whenoccurred",
            "currentlyFleeing"
          ]
        }
      },
      "required": [
        "domesticviolence"
      ]
    },
    "education_ids_json": {
      "type": "object",
      "properties": {
        "educations": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "educations": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "educationId": {
                    "type": "string"
                  },
                  "lastgradecompleted": {
                    "type": "integer"
                  },
                  "schoolStatus": {
                    "type": "integer"
                  }
                },
                "required": [
                  "educationId",
                  "lastgradecompleted",
                  "schoolStatus"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "educations"
          ]
        }
      },
      "required": [
        "educations"
      ]
    },
    "education_id_json": {
      "type": "object",
      "properties": {
        "education": {
          "type": "object",
          "properties": {
            "educationId": {
              "type": "string"
            },
            "lastgradecompleted": {
              "type": "integer"
            },
            "schoolStatus": {
              "type": "integer"
            }
          },
          "required": [
            "educationId",
            "lastgradecompleted",
            "schoolStatus"
          ]
        }
      },
      "required": [
        "education"
      ]
    },
    "education_json": {
      "type": "object",
      "properties": {
        "education": {
          "type": "object",
          "properties": {
            "lastgradecompleted": {
              "type": "integer"
            },
            "schoolStatus": {
              "type": "integer"
            }
          },
          "required": [
            "lastgradecompleted",
            "schoolStatus"
          ]
        }
      },
      "required": [
        "education"
      ]
    },
    "employment_id_json": {
      "type": "object",
      "properties": {
        "employment": {
          "type": "object",
          "properties": {
            "employmentId": {
              "type": "string"
            },
            "employed": {
              "type": "integer"
            },
            "employmentType": {
              "type": "integer"
            },
            "notEmployedReason": {
              "type": "integer"
            },
            "informationDate": {
              "type": "string"
            }
          },
          "required": [
            "employmentId",
            "employed",
            "employmentType",
            "notEmployedReason",
            "informationDate"
          ]
        }
      },
      "required": [
        "employment"
      ]
    },
    "employments_ids_json": {
      "type": "object",
      "properties": {
        "employments": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "employments": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "employmentId": {
                    "type": "string"
                  },
                  "employed": {
                    "type": "integer"
                  },
                  "employmentType": {
                    "type": "integer"
                  },
                  "notEmployedReason": {
                    "type": "integer"
                  },
                  "informationDate": {
                    "type": "string"
                  }
                },
                "required": [
                  "employmentId",
                  "employed",
                  "employmentType",
                  "notEmployedReason",
                  "informationDate"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "employments"
          ]
        }
      },
      "required": [
        "employments"
      ]
    },
    "employments_json": {
      "type": "object",
      "properties": {
        "employment": {
          "type": "object",
          "properties": {
            "employed": {
              "type": "integer"
            },
            "employmentType": {
              "type": "integer"
            },
            "notEmployedReason": {
              "type": "integer"
            },
            "informationDate": {
              "type": "string"
            }
          },
          "required": [
            "employed",
            "employmentType",
            "notEmployedReason",
            "informationDate"
          ]
        }
      },
      "required": [
        "employment"
      ]
    },
    "enrollment_id_json": {
      "type": "object",
      "properties": {
        "enrollment": {
          "type": "object",
          "properties": {
            "enrollmentId": {
              "type": "string"
            },
            "disablingcondition": {
              "type": "integer"
            },
            "entrydate": {
              "type": "integer"
            },
            "householdid": {
              "type": "string"
            },
            "housingstatus": {
              "type": "integer"
            },
            "monthshomelesspastthreeyears": {
              "type": "integer"
            },
            "otherresidenceprior": {
              "type": "string"
            },
            "relationshiptohoh": {
              "type": "integer"
            },
            "residenceprior": {
              "type": "integer"
            },
            "residencepriorlengthofstay": {
              "type": "integer"
            },
            "timeshomelesspastthreeyears": {
              "type": "integer"
            },
            "yearshomeless": {
              "type": "integer"
            },
            "entryfromstreetessh": {
              "type": "integer"
            },
            "dateCreated": {
              "type": "string"
            },
            "dateUpdated": {
              "type": "string"
            }
          },
          "required": [
            "enrollmentId",
            "disablingcondition",
            "entrydate",
            "householdid",
            "housingstatus",
            "monthshomelesspastthreeyears",
            "otherresidenceprior",
            "relationshiptohoh",
            "residenceprior",
            "residencepriorlengthofstay",
            "timeshomelesspastthreeyears",
            "yearshomeless",
            "entryfromstreetessh",
            "dateCreated",
            "dateUpdated"
          ]
        }
      },
      "required": [
        "enrollment"
      ]
    },
    "enrollmentcoc_id_json": {
      "type": "object",
      "properties": {
        "enrollmentCoc": {
          "type": "object",
          "properties": {
            "enrollmentCocId": {
              "type": "string"
            },
            "clientCode": {
              "type": "string"
            },
            "informationDate": {
              "type": "string"
            }
          },
          "required": [
            "enrollmentCocId",
            "clientCode",
            "informationDate"
          ]
        }
      },
      "required": [
        "enrollmentCoc"
      ]
    },
    "enrollmentcoc_ids_json": {
      "type": "object",
      "properties": {
        "enrollmentCocs": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "enrollmentCocs": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "enrollmentCocId": {
                    "type": "string"
                  },
                  "clientCode": {
                    "type": "string"
                  },
                  "informationDate": {
                    "type": "string"
                  }
                },
                "required": [
                  "enrollmentCocId",
                  "clientCode",
                  "informationDate"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "enrollmentCocs"
          ]
        }
      },
      "required": [
        "enrollmentCocs"
      ]
    },
    "enrollmentcoc_json": {
      "type": "object",
      "properties": {
        "enrollmentCoc": {
          "type": "object",
          "properties": {
            "informationDate": {
              "type": "string"
            },
            "clientCode": {
              "type": "string"
            }
          },
          "required": [
            "informationDate",
            "clientCode"
          ]
        }
      },
      "required": [
        "enrollmentCoc"
      ]
    },
    "enrollments_ids_json": {
      "type": "object",
      "properties": {
        "enrollments": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "enrollments": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "enrollmentId": {
                    "type": "string"
                  },
                  "disablingcondition": {
                    "type": "integer"
                  },
                  "entrydate": {
                    "type": "integer"
                  },
                  "householdid": {
                    "type": "string"
                  },
                  "housingstatus": {
                    "type": "integer"
                  },
                  "monthshomelesspastthreeyears": {
                    "type": "integer"
                  },
                  "otherresidenceprior": {
                    "type": "string"
                  },
                  "relationshiptohoh": {
                    "type": "integer"
                  },
                  "residenceprior": {
                    "type": "integer"
                  },
                  "residencepriorlengthofstay": {
                    "type": "integer"
                  },
                  "timeshomelesspastthreeyears": {
                    "type": "integer"
                  },
                  "yearshomeless": {
                    "type": "integer"
                  },
                  "entryfromstreetessh": {
                    "type": "integer"
                  },
                  "dateCreated": {
                    "type": "string"
                  }
                },
                "required": [
                  "enrollmentId",
                  "disablingcondition",
                  "entrydate",
                  "householdid",
                  "housingstatus",
                  "monthshomelesspastthreeyears",
                  "otherresidenceprior",
                  "relationshiptohoh",
                  "residenceprior",
                  "residencepriorlengthofstay",
                  "timeshomelesspastthreeyears",
                  "yearshomeless",
                  "entryfromstreetessh",
                  "dateCreated"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "enrollments"
          ]
        }
      },
      "required": [
        "enrollments"
      ]
    },
    "enrollments_json": {
      "type": "object",
      "properties": {
        "enrollment": {
          "type": "object",
          "properties": {
            "continuouslyhomelessoneyear": {
              "type": "integer"
            },
            "disablingcondition": {
              "type": "integer"
            },
            "entrydate": {
              "type": "integer"
            },
            "householdid": {
              "type": "string"
            },
            "housingstatus": {
              "type": "integer"
            },
            "monthshomelesspastthreeyears": {
              "type": "integer"
            },
            "monthshomelessthistime": {
              "type": "integer"
            },
            "otherresidenceprior": {
              "type": "string"
            },
            "personalid": {
              "type": "string"
            },
            "projectentryid": {
              "type": "string"
            },
            "projectid": {
              "type": "string"
            },
            "relationshiptohoh": {
              "type": "integer"
            },
            "residenceprior": {
              "type": "integer"
            },
            "residencepriorlengthofstay": {
              "type": "integer"
            },
            "statusdocumented": {
              "type": "integer"
            },
            "timeshomelesspastthreeyears": {
              "type": "integer"
            },
            "yearshomeless": {
              "type": "integer"
            },
            "entryfromstreetessh": {
              "type": "integer"
            },
            "datetostreetessh": {
              "type": "integer"
            }
          },
          "required": [
            "continuouslyhomelessoneyear",
            "disablingcondition",
            "entrydate",
            "householdid",
            "housingstatus",
            "monthshomelesspastthreeyears",
            "monthshomelessthistime",
            "otherresidenceprior",
            "personalid",
            "projectentryid",
            "projectid",
            "relationshiptohoh",
            "residenceprior",
            "residencepriorlengthofstay",
            "statusdocumented",
            "timeshomelesspastthreeyears",
            "yearshomeless",
            "entryfromstreetessh",
            "datetostreetessh"
          ]
        }
      },
      "required": [
        "enrollment"
      ],
      "example":{
        "enrollment":{
          "continuouslyhomelessoneyear":1,
          "disablingcondition":0,
          "entrydate":1459517941736,
          "householdid":"eca19be3-303b-47b0-a9ef-8832ab0fa13d",
          "housingstatus":3,
          "monthshomelesspastthreeyears":7,
          "monthshomelessthistime":1,
          "otherresidenceprior":"1",
          "personalid":"ba0ce84a-412e-4f3b-ae93-b903eb349754",
          "projectentryid":"a70b3fe4-1e0f-4288-835f-d88dacd2b84c",
          "projectid":"c7c41281-411b-4c93-a382-2cb20bc24a34",
          "relationshiptohoh":2,
          "residenceprior":2,
          "residencepriorlengthofstay":4,
          "statusdocumented":1,
          "timeshomelesspastthreeyears":1,
          "yearshomeless":2,
          "entryfromstreetessh":2,
          "datetostreetessh":1
        }
      }
    },
    "entryrhsp_id_json": {
      "type": "object",
      "properties": {
        "entryrhsp": {
          "id": "http://jsonschema.net/entryrhsp",
          "type": "object",
          "properties": {
            "entryrhspId": {
              "id": "http://jsonschema.net/entryrhsp/entryrhspId",
              "type": "string"
            },
            "worstHousingSituation": {
              "id": "http://jsonschema.net/entryrhsp/worstHousingSituation",
              "type": "integer"
            }
          },
          "required": [
            "entryrhspId",
            "worstHousingSituation"
          ]
        }
      },
      "required": [
        "entryrhsp"
      ]
    },
    "entryrhsp_ids_json": {
      "type": "object",
      "properties": {
        "entryrhsps": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "entryrhsps": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "entryrhspId": {
                    "type": "string"
                  },
                  "worstHousingSituation": {
                    "type": "integer"
                  }
                },
                "required": [
                  "entryrhspId",
                  "worstHousingSituation"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "entryrhsps"
          ]
        }
      },
      "required": [
        "entryrhsps"
      ]
    },
    "entryrhsp_json": {
      "type": "object",
      "properties": {
        "entryrhsp": {
          "id": "http://jsonschema.net/entryrhsp",
          "type": "object",
          "properties": {
            "worstHousingSituation": {
              "id": "http://jsonschema.net/entryrhsp/worstHousingSituation",
              "type": "integer"
            }
          },
          "required": [
            "worstHousingSituation"
          ]
        }
      },
      "required": [
        "entryrhsp"
      ]
    },
    "entryrhy_id_json": {
      "type": "object",
      "properties": {
        "entryrhy": {
          "type": "object",
          "properties": {
            "entryrhyId": {
              "type": "string"
            },
            "formerlyWardChildWelfrForestCare": {
              "type": "integer"
            },
            "yearsChildWelfrForestCare": {
              "type": "integer"
            },
            "monthsChildWelfrForestCare": {
              "type": "integer"
            },
            "formerlyWardOfJuvenileJustice": {
              "type": "integer"
            },
            "yearsJuvenileJustice": {
              "type": "integer"
            },
            "houseHoldDynamics": {
              "type": "integer"
            },
            "sexualOrientatiionGenderIdentityYouth": {
              "type": "integer"
            },
            "sexualOrientatiionGenderIdentityFamilyMbr": {
              "type": "integer"
            },
            "housingIssuesYouth": {
              "type": "integer"
            },
            "housingIssuesFamilyMbr": {
              "type": "integer"
            },
            "schoolEducationIssuesYouth": {
              "type": "integer"
            },
            "schoolEducationIssuesFamilyMbr": {
              "type": "integer"
            },
            "unemployementYouth": {
              "type": "integer"
            },
            "unemployementFamilyMbr": {
              "type": "integer"
            },
            "mentalHealthIssuesYouth": {
              "type": "integer"
            },
            "mentalHealthIssuesFamilyMbr": {
              "type": "integer"
            },
            "healthIssuesYouth": {
              "type": "integer"
            },
            "healthIssuesFamilyMbr": {
              "type": "integer"
            },
            "physicalDisabilityYouth": {
              "type": "integer"
            },
            "physicalDisabilityFamilyMbr": {
              "type": "integer"
            },
            "mentalDisabilityYouth": {
              "type": "integer"
            },
            "mentalDisabilityFamilyMbr": {
              "type": "integer"
            },
            "abuseAndNeglectYouth": {
              "type": "integer"
            },
            "abuseAndNeglectFamilyMbr": {
              "type": "integer"
            },
            "alcoholDrugAbuseYouth": {
              "type": "integer"
            },
            "alcoholDrugAbuseFamilyMbr": {
              "type": "integer"
            },
            "insufficientIncomeToSupportYouth": {
              "type": "integer"
            },
            "activeMilitaryParent": {
              "type": "integer"
            },
            "incarceratedParent": {
              "type": "integer"
            },
            "incarceratedParentStatus": {
              "type": "integer"
            },
            "referralSource": {
              "type": "integer"
            },
            "countOutReachReferralApproaches": {
              "type": "integer"
            },
            "exchangeForSex": {
              "type": "integer"
            },
            "exchangeForSexPastThreeMonths": {
              "type": "integer"
            },
            "countOfExchangeForSex": {
              "type": "integer"
            },
            "askedOfForcedToExchangeForSex": {
              "type": "integer"
            },
            "askedOfForcedToExchangeForSexPastThreeMonths": {
              "type": "integer"
            },
            "workPlaceViolenceThreat": {
              "type": "integer"
            },
            "workPlacePromiseDifference": {
              "type": "integer"
            },
            "coercedToContinueWork": {
              "type": "integer"
            },
            "laborExploitPastThreeMonths": {
              "type": "integer"
            }
          },
          "required": [
            "entryrhyId",
            "formerlyWardChildWelfrForestCare",
            "yearsChildWelfrForestCare",
            "monthsChildWelfrForestCare",
            "formerlyWardOfJuvenileJustice",
            "yearsJuvenileJustice",
            "houseHoldDynamics",
            "sexualOrientatiionGenderIdentityYouth",
            "sexualOrientatiionGenderIdentityFamilyMbr",
            "housingIssuesYouth",
            "housingIssuesFamilyMbr",
            "schoolEducationIssuesYouth",
            "schoolEducationIssuesFamilyMbr",
            "unemployementYouth",
            "unemployementFamilyMbr",
            "mentalHealthIssuesYouth",
            "mentalHealthIssuesFamilyMbr",
            "healthIssuesYouth",
            "healthIssuesFamilyMbr",
            "physicalDisabilityYouth",
            "physicalDisabilityFamilyMbr",
            "mentalDisabilityYouth",
            "mentalDisabilityFamilyMbr",
            "abuseAndNeglectYouth",
            "abuseAndNeglectFamilyMbr",
            "alcoholDrugAbuseYouth",
            "alcoholDrugAbuseFamilyMbr",
            "insufficientIncomeToSupportYouth",
            "activeMilitaryParent",
            "incarceratedParent",
            "incarceratedParentStatus",
            "referralSource",
            "countOutReachReferralApproaches",
            "exchangeForSex",
            "exchangeForSexPastThreeMonths",
            "countOfExchangeForSex",
            "askedOfForcedToExchangeForSex",
            "askedOfForcedToExchangeForSexPastThreeMonths",
            "workPlaceViolenceThreat",
            "workPlacePromiseDifference",
            "coercedToContinueWork",
            "laborExploitPastThreeMonths"
          ]
        }
      },
      "required": [
        "entryrhy"
      ]
    },
    "entryrhy_ids_json": {
      "type": "object",
      "properties": {
        "entryrhys": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "entryrhys": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "entryrhyId": {
                    "type": "string"
                  },
                  "formerlyWardChildWelfrForestCare": {
                    "type": "integer"
                  },
                  "yearsChildWelfrForestCare": {
                    "type": "integer"
                  },
                  "monthsChildWelfrForestCare": {
                    "type": "integer"
                  },
                  "formerlyWardOfJuvenileJustice": {
                    "type": "integer"
                  },
                  "yearsJuvenileJustice": {
                    "type": "integer"
                  },
                  "houseHoldDynamics": {
                    "type": "integer"
                  },
                  "sexualOrientatiionGenderIdentityYouth": {
                    "type": "integer"
                  },
                  "sexualOrientatiionGenderIdentityFamilyMbr": {
                    "type": "integer"
                  },
                  "housingIssuesYouth": {
                    "type": "integer"
                  },
                  "housingIssuesFamilyMbr": {
                    "type": "integer"
                  },
                  "schoolEducationIssuesYouth": {
                    "type": "integer"
                  },
                  "schoolEducationIssuesFamilyMbr": {
                    "type": "integer"
                  },
                  "unemployementYouth": {
                    "type": "integer"
                  },
                  "unemployementFamilyMbr": {
                    "type": "integer"
                  },
                  "mentalHealthIssuesYouth": {
                    "type": "integer"
                  },
                  "mentalHealthIssuesFamilyMbr": {
                    "type": "integer"
                  },
                  "healthIssuesYouth": {
                    "type": "integer"
                  },
                  "healthIssuesFamilyMbr": {
                    "type": "integer"
                  },
                  "physicalDisabilityYouth": {
                    "type": "integer"
                  },
                  "physicalDisabilityFamilyMbr": {
                    "type": "integer"
                  },
                  "mentalDisabilityYouth": {
                    "type": "integer"
                  },
                  "mentalDisabilityFamilyMbr": {
                    "type": "integer"
                  },
                  "abuseAndNeglectYouth": {
                    "type": "integer"
                  },
                  "abuseAndNeglectFamilyMbr": {
                    "type": "integer"
                  },
                  "alcoholDrugAbuseYouth": {
                    "type": "integer"
                  },
                  "alcoholDrugAbuseFamilyMbr": {
                    "type": "integer"
                  },
                  "insufficientIncomeToSupportYouth": {
                    "type": "integer"
                  },
                  "activeMilitaryParent": {
                    "type": "integer"
                  },
                  "incarceratedParent": {
                    "type": "integer"
                  },
                  "incarceratedParentStatus": {
                    "type": "integer"
                  },
                  "referralSource": {
                    "type": "integer"
                  },
                  "countOutReachReferralApproaches": {
                    "type": "integer"
                  },
                  "exchangeForSex": {
                    "type": "integer"
                  },
                  "exchangeForSexPastThreeMonths": {
                    "type": "integer"
                  },
                  "countOfExchangeForSex": {
                    "type": "integer"
                  },
                  "askedOfForcedToExchangeForSex": {
                    "type": "integer"
                  },
                  "askedOfForcedToExchangeForSexPastThreeMonths": {
                    "type": "integer"
                  },
                  "workPlaceViolenceThreat": {
                    "type": "integer"
                  },
                  "workPlacePromiseDifference": {
                    "type": "integer"
                  },
                  "coercedToContinueWork": {
                    "type": "integer"
                  },
                  "laborExploitPastThreeMonths": {
                    "type": "integer"
                  }
                },
                "required": [
                  "entryrhyId",
                  "formerlyWardChildWelfrForestCare",
                  "yearsChildWelfrForestCare",
                  "monthsChildWelfrForestCare",
                  "formerlyWardOfJuvenileJustice",
                  "yearsJuvenileJustice",
                  "houseHoldDynamics",
                  "sexualOrientatiionGenderIdentityYouth",
                  "sexualOrientatiionGenderIdentityFamilyMbr",
                  "housingIssuesYouth",
                  "housingIssuesFamilyMbr",
                  "schoolEducationIssuesYouth",
                  "schoolEducationIssuesFamilyMbr",
                  "unemployementYouth",
                  "unemployementFamilyMbr",
                  "mentalHealthIssuesYouth",
                  "mentalHealthIssuesFamilyMbr",
                  "healthIssuesYouth",
                  "healthIssuesFamilyMbr",
                  "physicalDisabilityYouth",
                  "physicalDisabilityFamilyMbr",
                  "mentalDisabilityYouth",
                  "mentalDisabilityFamilyMbr",
                  "abuseAndNeglectYouth",
                  "abuseAndNeglectFamilyMbr",
                  "alcoholDrugAbuseYouth",
                  "alcoholDrugAbuseFamilyMbr",
                  "insufficientIncomeToSupportYouth",
                  "activeMilitaryParent",
                  "incarceratedParent",
                  "incarceratedParentStatus",
                  "referralSource",
                  "countOutReachReferralApproaches",
                  "exchangeForSex",
                  "exchangeForSexPastThreeMonths",
                  "countOfExchangeForSex",
                  "askedOfForcedToExchangeForSex",
                  "askedOfForcedToExchangeForSexPastThreeMonths",
                  "workPlaceViolenceThreat",
                  "workPlacePromiseDifference",
                  "coercedToContinueWork",
                  "laborExploitPastThreeMonths"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "entryrhys"
          ]
        }
      },
      "required": [
        "entryrhys"
      ]
    },
    "entryrhy_json": {
      "type": "object",
      "properties": {
        "entryrhy": {
          "type": "object",
          "properties": {
            "formerlyWardChildWelfrForestCare": {
              "type": "integer"
            },
            "yearsChildWelfrForestCare": {
              "type": "integer"
            },
            "monthsChildWelfrForestCare": {
              "type": "integer"
            },
            "formerlyWardOfJuvenileJustice": {
              "type": "integer"
            },
            "yearsJuvenileJustice": {
              "type": "integer"
            },
            "houseHoldDynamics": {
              "type": "integer"
            },
            "sexualOrientatiionGenderIdentityYouth": {
              "type": "integer"
            },
            "sexualOrientatiionGenderIdentityFamilyMbr": {
              "type": "integer"
            },
            "housingIssuesYouth": {
              "type": "integer"
            },
            "housingIssuesFamilyMbr": {
              "type": "integer"
            },
            "schoolEducationIssuesYouth": {
              "type": "integer"
            },
            "schoolEducationIssuesFamilyMbr": {
              "type": "integer"
            },
            "unemployementYouth": {
              "type": "integer"
            },
            "unemployementFamilyMbr": {
              "type": "integer"
            },
            "mentalHealthIssuesYouth": {
              "type": "integer"
            },
            "mentalHealthIssuesFamilyMbr": {
              "type": "integer"
            },
            "healthIssuesYouth": {
              "type": "integer"
            },
            "healthIssuesFamilyMbr": {
              "type": "integer"
            },
            "physicalDisabilityYouth": {
              "type": "integer"
            },
            "physicalDisabilityFamilyMbr": {
              "type": "integer"
            },
            "mentalDisabilityYouth": {
              "type": "integer"
            },
            "mentalDisabilityFamilyMbr": {
              "type": "integer"
            },
            "abuseAndNeglectYouth": {
              "type": "integer"
            },
            "abuseAndNeglectFamilyMbr": {
              "type": "integer"
            },
            "alcoholDrugAbuseYouth": {
              "type": "integer"
            },
            "alcoholDrugAbuseFamilyMbr": {
              "type": "integer"
            },
            "insufficientIncomeToSupportYouth": {
              "type": "integer"
            },
            "activeMilitaryParent": {
              "type": "integer"
            },
            "incarceratedParent": {
              "type": "integer"
            },
            "incarceratedParentStatus": {
              "type": "integer"
            },
            "referralSource": {
              "type": "integer"
            },
            "countOutReachReferralApproaches": {
              "type": "integer"
            },
            "exchangeForSex": {
              "type": "integer"
            },
            "exchangeForSexPastThreeMonths": {
              "type": "integer"
            },
            "countOfExchangeForSex": {
              "type": "integer"
            },
            "askedOfForcedToExchangeForSex": {
              "type": "integer"
            },
            "askedOfForcedToExchangeForSexPastThreeMonths": {
              "type": "integer"
            },
            "workPlaceViolenceThreat": {
              "type": "integer"
            },
            "workPlacePromiseDifference": {
              "type": "integer"
            },
            "coercedToContinueWork": {
              "type": "integer"
            },
            "laborExploitPastThreeMonths": {
              "type": "integer"
            }
          },
          "required": [
            "formerlyWardChildWelfrForestCare",
            "yearsChildWelfrForestCare",
            "monthsChildWelfrForestCare",
            "formerlyWardOfJuvenileJustice",
            "yearsJuvenileJustice",
            "houseHoldDynamics",
            "sexualOrientatiionGenderIdentityYouth",
            "sexualOrientatiionGenderIdentityFamilyMbr",
            "housingIssuesYouth",
            "housingIssuesFamilyMbr",
            "schoolEducationIssuesYouth",
            "schoolEducationIssuesFamilyMbr",
            "unemployementYouth",
            "unemployementFamilyMbr",
            "mentalHealthIssuesYouth",
            "mentalHealthIssuesFamilyMbr",
            "healthIssuesYouth",
            "healthIssuesFamilyMbr",
            "physicalDisabilityYouth",
            "physicalDisabilityFamilyMbr",
            "mentalDisabilityYouth",
            "mentalDisabilityFamilyMbr",
            "abuseAndNeglectYouth",
            "abuseAndNeglectFamilyMbr",
            "alcoholDrugAbuseYouth",
            "alcoholDrugAbuseFamilyMbr",
            "insufficientIncomeToSupportYouth",
            "activeMilitaryParent",
            "incarceratedParent",
            "incarceratedParentStatus",
            "referralSource",
            "countOutReachReferralApproaches",
            "exchangeForSex",
            "exchangeForSexPastThreeMonths",
            "countOfExchangeForSex",
            "askedOfForcedToExchangeForSex",
            "askedOfForcedToExchangeForSexPastThreeMonths",
            "workPlaceViolenceThreat",
            "workPlacePromiseDifference",
            "coercedToContinueWork",
            "laborExploitPastThreeMonths"
          ]
        }
      },
      "required": [
        "entryrhy"
      ]
    },
    "entryssvf_id_json": {
      "type": "object",
      "properties": {
        "entryssvf": {
          "type": "object",
          "properties": {
            "entryssvfId": {
              "type": "string"
            },
            "percentami": {
              "type": "integer"
            },
            "lastPermanentStreet": {
              "type": "string"
            },
            "lastPermanentCity": {
              "type": "string"
            },
            "lastPermanentState": {
              "type": "string"
            },
            "lastPermanentZip": {
              "type": "string"
            },
            "addressDataQuality": {
              "type": "integer"
            },
            "hpScreenScore": {
              "type": "integer"
            },
            "vamcStaction": {
              "type": "string"
            }
          },
          "required": [
            "entryssvfId",
            "percentami",
            "lastPermanentStreet",
            "lastPermanentCity",
            "lastPermanentState",
            "lastPermanentZip",
            "addressDataQuality",
            "hpScreenScore",
            "vamcStaction"
          ]
        }
      },
      "required": [
        "entryssvf"
      ]
    },
    "entryssvf_ids_json": {
      "type": "object",
      "properties": {
        "entryssvfs": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "entryssvfs": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "entryssvfId": {
                    "type": "string"
                  },
                  "percentami": {
                    "type": "integer"
                  },
                  "lastPermanentStreet": {
                    "type": "string"
                  },
                  "lastPermanentCity": {
                    "type": "string"
                  },
                  "lastPermanentState": {
                    "type": "string"
                  },
                  "lastPermanentZip": {
                    "type": "string"
                  },
                  "addressDataQuality": {
                    "type": "integer"
                  },
                  "hpScreenScore": {
                    "type": "integer"
                  },
                  "vamcStaction": {
                    "type": "string"
                  }
                },
                "required": [
                  "entryssvfId",
                  "percentami",
                  "lastPermanentStreet",
                  "lastPermanentCity",
                  "lastPermanentState",
                  "lastPermanentZip",
                  "addressDataQuality",
                  "hpScreenScore",
                  "vamcStaction"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "entryssvfs"
          ]
        }
      },
      "required": [
        "entryssvfs"
      ]
    },
    "entryssvf_json": {
      "type": "object",
      "properties": {
        "entryssvf": {
          "type": "object",
          "properties": {
            "percentami": {
              "type": "integer"
            },
            "lastPermanentStreet": {
              "type": "string"
            },
            "lastPermanentCity": {
              "type": "string"
            },
            "lastPermanentState": {
              "type": "string"
            },
            "lastPermanentZip": {
              "type": "string"
            },
            "addressDataQuality": {
              "type": "integer"
            },
            "hpScreenScore": {
              "type": "integer"
            },
            "vamcStaction": {
              "type": "string"
            }
          },
          "required": [
            "percentami",
            "lastPermanentStreet",
            "lastPermanentCity",
            "lastPermanentState",
            "lastPermanentZip",
            "addressDataQuality",
            "hpScreenScore",
            "vamcStaction"
          ]
        }
      },
      "required": [
        "entryssvf"
      ]
    },
    "exit_id_json": {
      "type": "object",
      "properties": {
        "exit": {
          "type": "object",
          "properties": {
            "exitId": {
              "type": "string"
            },
            "exitDate": {
              "type": "integer"
            },
            "otherDestination": {
              "type": "string"
            },
            "destination": {
              "type": "integer"
            },
            "dateCreated": {
              "type": "string"
            },
            "dateUpdated": {
              "type": "string"
            }
          },
          "required": [
            "exitId",
            "exitDate",
            "otherDestination",
            "destination",
            "dateCreated",
            "dateUpdated"
          ]
        }
      },
      "required": [
        "exit"
      ]
    },
    "exit_ids_json": {
      "type": "object",
      "properties": {
        "exits": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "exits": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "exitId": {
                    "type": "string"
                  },
                  "exitDate": {
                    "type": "integer"
                  },
                  "otherDestination": {
                    "type": "string"
                  },
                  "destination": {
                    "type": "integer"
                  },
                  "dateCreated": {
                    "type": "string"
                  }
                },
                "required": [
                  "exitId",
                  "exitDate",
                  "otherDestination",
                  "destination",
                  "dateCreated"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "exits"
          ]
        }
      },
      "required": [
        "exits"
      ]
    },
    "exit_json": {
      "type": "object",
      "properties": {
        "exit": {
          "type": "object",
          "properties": {
            "exitDate": {
              "type": "integer"
            },
            "otherDestination": {
              "type": "string"
            },
            "destination": {
              "type": "integer"
            }
          },
          "required": [
            "exitDate",
            "otherDestination",
            "destination"
          ]
        }
      },
      "required": [
        "exit"
      ]
    },
    "exithosingassessments_id_json": {
      "type": "object",
      "properties": {
        "exithousingassessment": {
          "type": "object",
          "properties": {
            "exithousingassessmentId": {
              "type": "string"
            },
            "housingassessment": {
              "type": "integer"
            },
            "subsidyinformation": {
              "type": "integer"
            }
          },
          "required": [
            "exithousingassessmentId",
            "housingassessment",
            "subsidyinformation"
          ]
        }
      },
      "required": [
        "exithousingassessment"
      ]
    },
    "exithosingassessments_ids_json": {
      "type": "object",
      "properties": {
        "exithousingassessments": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "exithousingassessments": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "exithousingassessmentId": {
                    "type": "string"
                  },
                  "housingassessment": {
                    "type": "integer"
                  },
                  "subsidyinformation": {
                    "type": "integer"
                  }
                },
                "required": [
                  "exithousingassessmentId",
                  "housingassessment",
                  "subsidyinformation"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "exithousingassessments"
          ]
        }
      },
      "required": [
        "exithousingassessments"
      ]
    },
    "exithosingassessments_json": {
      "type": "object",
      "properties": {
        "exithousingassessment": {
          "type": "object",
          "properties": {
            "housingassessment": {
              "type": "integer"
            },
            "subsidyinformation": {
              "type": "integer"
            }
          },
          "required": [
            "housingassessment",
            "subsidyinformation"
          ]
        }
      },
      "required": [
        "exithousingassessment"
      ]
    },
    "exitpath_id_json": {
      "type": "object",
      "properties": {
        "exitpath": {
          "type": "object",
          "properties": {
            "exitpathId": {
              "type": "string"
            }
          },
          "required": [
            "exitpathId"
          ]
        }
      },
      "required": [
        "exitpath"
      ]
    },
    "exitpath_ids_json": {
      "type": "object",
      "properties": {
        "exitpaths": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "exitpaths": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "exitpathId": {
                    "type": "string"
                  },
                  "connectionWithSoar": {
                    "type": "integer"
                  }
                },
                "required": [
                  "exitpathId",
                  "connectionWithSoar"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "exitpaths"
          ]
        }
      },
      "required": [
        "exitpaths"
      ]
    },
    "exitpath_json": {
      "type": "object",
      "properties": {
        "exitpath": {
          "type": "object",
          "properties": {
            "connectionWithSoar": {
              "type": "integer"
            }
          },
          "required": [
            "connectionWithSoar"
          ]
        }
      },
      "required": [
        "exitpath"
      ]
    },
    "exitrhy_id_json": {
      "type": "object",
      "properties": {
        "entryrhy": {
          "id": "entryrhy",
          "type": "object",
          "properties": {
            "entryrhyId": {
              "id": "entryrhyId",
              "type": "string"
            },
            "sexualOrientation": {
              "id": "sexualOrientation",
              "type": "integer"
            },
            "formerlyWardChildWelfrForestCare": {
              "id": "formerlyWardChildWelfrForestCare",
              "type": "integer"
            },
            "yearsChildWelfrForestCare": {
              "id": "yearsChildWelfrForestCare",
              "type": "integer"
            },
            "monthsChildWelfrForestCare": {
              "id": "monthsChildWelfrForestCare",
              "type": "integer"
            },
            "formerlyWardOfJuvenileJustice": {
              "id": "formerlyWardOfJuvenileJustice",
              "type": "integer"
            },
            "yearsJuvenileJustice": {
              "id": "yearsJuvenileJustice",
              "type": "integer"
            },
            "houseHoldDynamics": {
              "id": "houseHoldDynamics",
              "type": "integer"
            },
            "sexualOrientatiionGenderIdentityYouth": {
              "id": "sexualOrientatiionGenderIdentityYouth",
              "type": "integer"
            },
            "sexualOrientatiionGenderIdentityFamilyMbr": {
              "id": "sexualOrientatiionGenderIdentityFamilyMbr",
              "type": "integer"
            },
            "housingIssuesYouth": {
              "id": "housingIssuesYouth",
              "type": "integer"
            },
            "housingIssuesFamilyMbr": {
              "id": "housingIssuesFamilyMbr",
              "type": "integer"
            },
            "schoolEducationIssuesYouth": {
              "id": "schoolEducationIssuesYouth",
              "type": "integer"
            },
            "schoolEducationIssuesFamilyMbr": {
              "id": "schoolEducationIssuesFamilyMbr",
              "type": "integer"
            },
            "unemployementYouth": {
              "id": "unemployementYouth",
              "type": "integer"
            },
            "unemployementFamilyMbr": {
              "id": "unemployementFamilyMbr",
              "type": "integer"
            },
            "mentalHealthIssuesYouth": {
              "id": "mentalHealthIssuesYouth",
              "type": "integer"
            },
            "mentalHealthIssuesFamilyMbr": {
              "id": "mentalHealthIssuesFamilyMbr",
              "type": "integer"
            },
            "healthIssuesYouth": {
              "id": "healthIssuesYouth",
              "type": "integer"
            },
            "healthIssuesFamilyMbr": {
              "id": "healthIssuesFamilyMbr",
              "type": "integer"
            },
            "physicalDisabilityYouth": {
              "id": "physicalDisabilityYouth",
              "type": "integer"
            },
            "physicalDisabilityFamilyMbr": {
              "id": "physicalDisabilityFamilyMbr",
              "type": "integer"
            },
            "mentalDisabilityYouth": {
              "id": "mentalDisabilityYouth",
              "type": "integer"
            },
            "mentalDisabilityFamilyMbr": {
              "id": "mentalDisabilityFamilyMbr",
              "type": "integer"
            },
            "abuseAndNeglectYouth": {
              "id": "abuseAndNeglectYouth",
              "type": "integer"
            },
            "abuseAndNeglectFamilyMbr": {
              "id": "abuseAndNeglectFamilyMbr",
              "type": "integer"
            },
            "alcoholDrugAbuseYouth": {
              "id": "alcoholDrugAbuseYouth",
              "type": "integer"
            },
            "alcoholDrugAbuseFamilyMbr": {
              "id": "alcoholDrugAbuseFamilyMbr",
              "type": "integer"
            },
            "insufficientIncomeToSupportYouth": {
              "id": "insufficientIncomeToSupportYouth",
              "type": "integer"
            },
            "activeMilitaryParent": {
              "id": "activeMilitaryParent",
              "type": "integer"
            },
            "incarceratedParent": {
              "id": "incarceratedParent",
              "type": "integer"
            },
            "incarceratedParentStatus": {
              "id": "incarceratedParentStatus",
              "type": "integer"
            },
            "referralSource": {
              "id": "referralSource",
              "type": "integer"
            },
            "countOutReachReferralApproaches": {
              "id": "countOutReachReferralApproaches",
              "type": "integer"
            },
            "exchangeForSex": {
              "id": "exchangeForSex",
              "type": "integer"
            },
            "exchangeForSexPastThreeMonths": {
              "id": "exchangeForSexPastThreeMonths",
              "type": "integer"
            },
            "countOfExchangeForSex": {
              "id": "countOfExchangeForSex",
              "type": "integer"
            },
            "askedOfForcedToExchangeForSex": {
              "id": "askedOfForcedToExchangeForSex",
              "type": "integer"
            },
            "askedOfForcedToExchangeForSexPastThreeMonths": {
              "id": "askedOfForcedToExchangeForSexPastThreeMonths",
              "type": "integer"
            },
            "workPlaceViolenceThreat": {
              "id": "workPlaceViolenceThreat",
              "type": "integer"
            },
            "workPlacePromiseDifference": {
              "id": "workPlacePromiseDifference",
              "type": "integer"
            },
            "coercedToContinueWork": {
              "id": "coercedToContinueWork",
              "type": "integer"
            },
            "laborExploitPastThreeMonths": {
              "id": "laborExploitPastThreeMonths",
              "type": "integer"
            }
          },
          "required": [
            "entryrhyId",
            "sexualOrientation",
            "formerlyWardChildWelfrForestCare",
            "yearsChildWelfrForestCare",
            "monthsChildWelfrForestCare",
            "formerlyWardOfJuvenileJustice",
            "yearsJuvenileJustice",
            "houseHoldDynamics",
            "sexualOrientatiionGenderIdentityYouth",
            "sexualOrientatiionGenderIdentityFamilyMbr",
            "housingIssuesYouth",
            "housingIssuesFamilyMbr",
            "schoolEducationIssuesYouth",
            "schoolEducationIssuesFamilyMbr",
            "unemployementYouth",
            "unemployementFamilyMbr",
            "mentalHealthIssuesYouth",
            "mentalHealthIssuesFamilyMbr",
            "healthIssuesYouth",
            "healthIssuesFamilyMbr",
            "physicalDisabilityYouth",
            "physicalDisabilityFamilyMbr",
            "mentalDisabilityYouth",
            "mentalDisabilityFamilyMbr",
            "abuseAndNeglectYouth",
            "abuseAndNeglectFamilyMbr",
            "alcoholDrugAbuseYouth",
            "alcoholDrugAbuseFamilyMbr",
            "insufficientIncomeToSupportYouth",
            "activeMilitaryParent",
            "incarceratedParent",
            "incarceratedParentStatus",
            "referralSource",
            "countOutReachReferralApproaches",
            "exchangeForSex",
            "exchangeForSexPastThreeMonths",
            "countOfExchangeForSex",
            "askedOfForcedToExchangeForSex",
            "askedOfForcedToExchangeForSexPastThreeMonths",
            "workPlaceViolenceThreat",
            "workPlacePromiseDifference",
            "coercedToContinueWork",
            "laborExploitPastThreeMonths"
          ]
        }
      },
      "required": [
        "entryrhy"
      ]
    },
    "exitrhy_ids_json": {
      "type": "object",
      "properties": {
        "exitrhys": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "exitrhys": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "exitrhyId": {
                    "type": "string"
                  },
                  "projectCompletionStatus": {
                    "type": "integer"
                  },
                  "earlyExitReason": {
                    "type": "integer"
                  },
                  "familyReunificationAchieved": {
                    "type": "integer"
                  },
                  "writtenAfterCarePlan": {
                    "type": "integer"
                  },
                  "assistanceMainStreamBenefits": {
                    "type": "integer"
                  },
                  "permenantHousingPlacement": {
                    "type": "integer"
                  },
                  "tempShelterPlacement": {
                    "type": "integer"
                  },
                  "exitCounseling": {
                    "type": "integer"
                  },
                  "furtherFollowupServices": {
                    "type": "integer"
                  },
                  "scheduledFollowupContacts": {
                    "type": "integer"
                  },
                  "resourcePackage": {
                    "type": "integer"
                  },
                  "otherAftercarePlanOrAction": {
                    "type": "integer"
                  }
                },
                "required": [
                  "exitrhyId",
                  "projectCompletionStatus",
                  "earlyExitReason",
                  "familyReunificationAchieved",
                  "writtenAfterCarePlan",
                  "assistanceMainStreamBenefits",
                  "permenantHousingPlacement",
                  "tempShelterPlacement",
                  "exitCounseling",
                  "furtherFollowupServices",
                  "scheduledFollowupContacts",
                  "resourcePackage",
                  "otherAftercarePlanOrAction"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "exitrhys"
          ]
        }
      },
      "required": [
        "exitrhys"
      ]
    },
    "exitrhy_json": {
      "type": "object",
      "properties": {
        "exitrhy": {
          "type": "object",
          "properties": {
            "projectCompletionStatus": {
              "type": "integer"
            },
            "earlyExitReason": {
              "type": "integer"
            },
            "familyReunificationAchieved": {
              "type": "integer"
            },
            "writtenAfterCarePlan": {
              "type": "integer"
            },
            "assistanceMainStreamBenefits": {
              "type": "integer"
            },
            "permenantHousingPlacement": {
              "type": "integer"
            },
            "tempShelterPlacement": {
              "type": "integer"
            },
            "exitCounseling": {
              "type": "integer"
            },
            "furtherFollowupServices": {
              "type": "integer"
            },
            "scheduledFollowupContacts": {
              "type": "integer"
            },
            "resourcePackage": {
              "type": "integer"
            },
            "otherAftercarePlanOrAction": {
              "type": "integer"
            }
          },
          "required": [
            "projectCompletionStatus",
            "earlyExitReason",
            "familyReunificationAchieved",
            "writtenAfterCarePlan",
            "assistanceMainStreamBenefits",
            "permenantHousingPlacement",
            "tempShelterPlacement",
            "exitCounseling",
            "furtherFollowupServices",
            "scheduledFollowupContacts",
            "resourcePackage",
            "otherAftercarePlanOrAction"
          ]
        }
      },
      "required": [
        "exitrhy"
      ]
    },
    "funder_id_json": {
      "type": "object",
      "properties": {
        "funder": {
          "type": "object",
          "properties": {
            "funderId": {
              "type": "string"
            },
            "funder": {
              "type": "integer"
            },
            "grantid": {
              "type": "string"
            },
            "dateCreated": {
              "type": "string"
            },
            "dateUpdated": {
              "type": "string"
            },
            "enddate": {
              "type": "string"
            },
            "startdate": {
              "type": "string"
            }
          },
          "required": [
            "funderId",
            "funder",
            "grantid",
            "dateCreated",
            "dateUpdated",
            "enddate",
            "startdate"
          ]
        }
      },
      "required": [
        "funder"
      ]
    },
    "funders_ids_json": {
      "type": "object",
      "properties": {
        "funders": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "funders": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "funderId": {
                    "type": "string"
                  },
                  "funder": {
                    "type": "integer"
                  },
                  "grantid": {
                    "type": "string"
                  },
                  "dateCreated": {
                    "type": "string"
                  },
                  "enddate": {
                    "type": "string"
                  },
                  "startdate": {
                    "type": "string"
                  }
                },
                "required": [
                  "funderId",
                  "funder",
                  "grantid",
                  "dateCreated",
                  "enddate",
                  "startdate"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "funders"
          ]
        }
      },
      "required": [
        "funders"
      ]
    },
    "funders_json": {
      "type": "object",
      "properties": {
        "funder": {
          "type": "object",
          "properties": {
            "enddate": {
              "type": "string"
            },
            "funder": {
              "type": "integer"
            },
            "grantid": {
              "type": "string"
            },
            "startdate": {
              "type": "string"
            }
          },
          "required": [
            "enddate",
            "funder",
            "grantid",
            "startdate"
          ]
        }
      },
      "required": [
        "funder"
      ]
    },
    "healthinsurance_id_json": {
      "type": "object",
      "properties": {
        "healthinsurance": {
          "type": "object",
          "properties": {
            "healthinsuranceId": {
              "type": "string"
            },
            "insurancefromanysource": {
              "type": "integer"
            },
            "medicaid": {
              "type": "integer"
            },
            "nomedicaidreason": {
              "type": "integer"
            },
            "medicare": {
              "type": "integer"
            },
            "nomedicarereason": {
              "type": "integer"
            },
            "schip": {
              "type": "integer"
            },
            "noschipreason": {
              "type": "integer"
            },
            "novamedreason": {
              "type": "integer"
            },
            "employerprovided": {
              "type": "integer"
            },
            "noemployerprovidedreason": {
              "type": "integer"
            },
            "cobra": {
              "type": "integer"
            },
            "nocobrareason": {
              "type": "integer"
            },
            "privatepay": {
              "type": "integer"
            },
            "noprivatepayreason": {
              "type": "integer"
            },
            "statehealthins": {
              "type": "integer"
            },
            "nostatehealthinsreason": {
              "type": "integer"
            },
            "otherSource": {
              "type": "integer"
            },
            "otherSourceIdentify": {
              "type": "string"
            }
          },
          "required": [
            "healthinsuranceId",
            "insurancefromanysource",
            "medicaid",
            "nomedicaidreason",
            "medicare",
            "nomedicarereason",
            "schip",
            "noschipreason",
            "novamedreason",
            "employerprovided",
            "noemployerprovidedreason",
            "cobra",
            "nocobrareason",
            "privatepay",
            "noprivatepayreason",
            "statehealthins",
            "nostatehealthinsreason",
            "otherSource",
            "otherSourceIdentify"
          ]
        }
      },
      "required": [
        "healthinsurance"
      ]
    },
    "healthinsurance_json": {
      "type": "object",
      "properties": {
        "healthinsurance": {
          "type": "object",
          "properties": {
            "insurancefromanysource": {
              "type": "integer"
            },
            "medicaid": {
              "type": "integer"
            },
            "nomedicaidreason": {
              "type": "integer"
            },
            "medicare": {
              "type": "integer"
            },
            "nomedicarereason": {
              "type": "integer"
            },
            "schip": {
              "type": "integer"
            },
            "noschipreason": {
              "type": "integer"
            },
            "vamedicalservices": {
              "type": "integer"
            },
            "novamedreason": {
              "type": "integer"
            },
            "employerprovided": {
              "type": "integer"
            },
            "noemployerprovidedreason": {
              "type": "integer"
            },
            "cobra": {
              "type": "integer"
            },
            "nocobrareason": {
              "type": "integer"
            },
            "privatepay": {
              "type": "integer"
            },
            "noprivatepayreason": {
              "type": "integer"
            },
            "statehealthins": {
              "type": "integer"
            },
            "nostatehealthinsreason": {
              "type": "integer"
            },
            "otherSource": {
              "type": "integer"
            },
            "otherSourceIdentify": {
              "type": "string"
            }
          },
          "required": [
            "insurancefromanysource",
            "medicaid",
            "nomedicaidreason",
            "medicare",
            "nomedicarereason",
            "schip",
            "noschipreason",
            "vamedicalservices",
            "novamedreason",
            "employerprovided",
            "noemployerprovidedreason",
            "cobra",
            "nocobrareason",
            "privatepay",
            "noprivatepayreason",
            "statehealthins",
            "nostatehealthinsreason",
            "otherSource",
            "otherSourceIdentify"
          ]
        }
      },
      "required": [
        "healthinsurance"
      ]
    },
    "healthinsurances_ids_json": {
      "type": "object",
      "properties": {
        "healthinsurances": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "healthinsurances": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "healthinsuranceId": {
                    "type": "string"
                  },
                  "insurancefromanysource": {
                    "type": "integer"
                  },
                  "medicaid": {
                    "type": "integer"
                  },
                  "nomedicaidreason": {
                    "type": "integer"
                  },
                  "medicare": {
                    "type": "integer"
                  },
                  "nomedicarereason": {
                    "type": "integer"
                  },
                  "schip": {
                    "type": "integer"
                  },
                  "noschipreason": {
                    "type": "integer"
                  },
                  "novamedreason": {
                    "type": "integer"
                  },
                  "employerprovided": {
                    "type": "integer"
                  },
                  "noemployerprovidedreason": {
                    "type": "integer"
                  },
                  "cobra": {
                    "type": "integer"
                  },
                  "nocobrareason": {
                    "type": "integer"
                  },
                  "privatepay": {
                    "type": "integer"
                  },
                  "noprivatepayreason": {
                    "type": "integer"
                  },
                  "statehealthins": {
                    "type": "integer"
                  },
                  "nostatehealthinsreason": {
                    "type": "integer"
                  },
                  "otherSource": {
                    "type": "integer"
                  },
                  "otherSourceIdentify": {
                    "type": "string"
                  }
                },
                "required": [
                  "healthinsuranceId",
                  "insurancefromanysource",
                  "medicaid",
                  "nomedicaidreason",
                  "medicare",
                  "nomedicarereason",
                  "schip",
                  "noschipreason",
                  "novamedreason",
                  "employerprovided",
                  "noemployerprovidedreason",
                  "cobra",
                  "nocobrareason",
                  "privatepay",
                  "noprivatepayreason",
                  "statehealthins",
                  "nostatehealthinsreason",
                  "otherSource",
                  "otherSourceIdentify"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "healthinsurances"
          ]
        }
      },
      "required": [
        "healthinsurances"
      ]
    },
    "healthstatus_id_json": {
      "type": "object",
      "properties": {
        "healthstatus": {
          "type": "object",
          "properties": {
            "healthstatusId": {
              "type": "string"
            },
            "healthCategory": {
              "type": "integer"
            },
            "healthStatus": {
              "type": "integer"
            },
            "informationDate": {
              "type": "string"
            },
            "dueDate": {
              "type": "string"
            }
          },
          "required": [
            "healthstatusId",
            "healthCategory",
            "healthStatus",
            "informationDate",
            "dueDate"
          ]
        }
      },
      "required": [
        "healthstatus"
      ]
    },
    "healthstatus_ids_json": {
      "type": "object",
      "properties": {
        "healthstatuses": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "healthstatuses": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "healthstatusId": {
                    "type": "string"
                  },
                  "healthCategory": {
                    "type": "integer"
                  },
                  "healthStatus": {
                    "type": "integer"
                  },
                  "informationDate": {
                    "type": "string"
                  },
                  "dueDate": {
                    "type": "string"
                  }
                },
                "required": [
                  "healthstatusId",
                  "healthCategory",
                  "healthStatus",
                  "informationDate",
                  "dueDate"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "healthstatuses"
          ]
        }
      },
      "required": [
        "healthstatuses"
      ]
    },
    "healthstatus_json": {
      "type": "object",
      "properties": {
        "healthstatus": {
          "type": "object",
          "properties": {
            "healthCategory": {
              "type": "integer"
            },
            "healthStatus": {
              "type": "integer"
            },
            "informationDate": {
              "type": "string"
            },
            "dueDate": {
              "type": "string"
            }
          },
          "required": [
            "healthCategory",
            "healthStatus",
            "informationDate",
            "dueDate"
          ]
        }
      },
      "required": [
        "healthstatus"
      ]
    },
    "housingassesmentdispositions_id_json": {
      "type": "object",
      "properties": {
        "housingAssessmentDisposition": {
          "type": "object",
          "properties": {
            "housingAssessmentDispositionId": {
              "type": "string"
            },
            "assessmentdisposition": {
              "type": "integer"
            },
            "otherdisposition": {
              "type": "string"
            },
            "dateCreated": {
              "type": "string"
            },
            "dateUpdated": {
              "type": "string"
            }
          },
          "required": [
            "housingAssessmentDispositionId",
            "assessmentdisposition",
            "otherdisposition",
            "dateCreated",
            "dateUpdated"
          ]
        }
      },
      "required": [
        "housingAssessmentDisposition"
      ]
    },
    "housingassesmentdispositions_ids_json": {
      "type": "object",
      "properties": {
        "HousingAssessmentDispositions": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "housingAssessmentDispositions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "housingAssessmentDispositionId": {
                    "type": "string"
                  },
                  "assessmentdisposition": {
                    "type": "integer"
                  },
                  "otherdisposition": {
                    "type": "string"
                  },
                  "dateCreated": {
                    "type": "string"
                  }
                },
                "required": [
                  "housingAssessmentDispositionId",
                  "assessmentdisposition",
                  "otherdisposition",
                  "dateCreated"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "housingAssessmentDispositions"
          ]
        }
      },
      "required": [
        "HousingAssessmentDispositions"
      ]
    },
    "housingassesmentdispositions_json": {
      "type": "object",
      "properties": {
        "housingAssessmentDisposition": {
          "type": "object",
          "properties": {
            "assessmentdisposition": {
              "type": "integer"
            },
            "otherdisposition": {
              "type": "string"
            }
          },
          "required": [
            "assessmentdisposition",
            "otherdisposition"
          ]
        }
      },
      "required": [
        "housingAssessmentDisposition"
      ]
    },
    "id_affiliation_json": {
      "type": "object",
      "properties": {
        "affiliation": {
          "type": "object",
          "properties": {
            "affiliationId": {
              "type": "string"
            }
          },
          "required": [
            "affiliationId"
          ]
        }
      },
      "required": [
        "affiliation"
      ]
    },
    "id_clients_json": {
      "type": "object",
      "properties": {
        "client": {
          "type": "object",
          "properties": {
            "clientId": {
              "type": "string"
            }
          },
          "required": [
            "clientId"
          ]
        }
      },
      "required": [
        "client"
      ]
    },
    "id_contact_json": {
      "type": "object",
      "properties": {
        "contact": {
          "type": "object",
          "properties": {
            "contactId": {
              "type": "string"
            }
          },
          "required": [
            "contactId"
          ]
        }
      },
      "required": [
        "contact"
      ]
    },
    "id_dateofengagements_json": {
      "type": "object",
      "properties": {
        "dateofengagement": {
          "type": "object",
          "properties": {
            "dateofengagementId": {
              "type": "string"
            }
          },
          "required": [
            "dateofengagementId"
          ]
        }
      },
      "required": [
        "dateofengagement"
      ]
    },
    "id_disabilities_json": {
      "type": "object",
      "properties": {
        "disabilities": {
          "type": "object",
          "properties": {
            "disabilitiesId": {
              "type": "string"
            }
          },
          "required": [
            "disabilitiesId"
          ]
        }
      },
      "required": [
        "disabilities"
      ]
    },
    "id_domesticviolences_json": {
      "type": "object",
      "properties": {
        "domesticviolence": {
          "id": "http://jsonschema.net/domesticviolence",
          "type": "object",
          "properties": {
            "domesticviolenceId": {
              "id": "http://jsonschema.net/domesticviolence/domesticviolenceId",
              "type": "string"
            }
          },
          "required": [
            "domesticviolenceId"
          ]
        }
      },
      "required": [
        "domesticviolence"
      ]
    },
    "id_education_json": {
      "type": "object",
      "properties": {
        "education": {
          "type": "object",
          "properties": {
            "educationId": {
              "type": "string"
            }
          },
          "required": [
            "educationId"
          ]
        }
      },
      "required": [
        "education"
      ]
    },
    "id_employments_json": {
      "type": "object",
      "properties": {
        "employment": {
          "id": "http://jsonschema.net/employment",
          "type": "object",
          "properties": {
            "employmentId": {
              "id": "http://jsonschema.net/employment/employmentId",
              "type": "string"
            }
          },
          "required": [
            "employmentId"
          ]
        }
      },
      "required": [
        "employment"
      ]
    },
    "id_enrollmentcoc_json": {
      "type": "object",
      "properties": {
        "enrollmentCoc": {
          "type": "object",
          "properties": {
            "enrollmentCocId": {
              "type": "string"
            }
          },
          "required": [
            "enrollmentCocId"
          ]
        }
      },
      "required": [
        "enrollmentCoc"
      ]
    },
    "id_enrollments_json": {
      "type": "object",
      "properties": {
        "enrollment": {
          "type": "object",
          "properties": {
            "enrollmentId": {
              "type": "string"
            },
            "yearshomeless": {
              "type": "integer"
            }
          },
          "required": [
            "enrollmentId",
            "yearshomeless"
          ]
        }
      },
      "required": [
        "enrollment"
      ]
    },
    "id_entryrhsp_json": {
      "type": "object",
      "properties": {
        "entryrhsp": {
          "id": "http://jsonschema.net/entryrhsp",
          "type": "object",
          "properties": {
            "entryrhspId": {
              "id": "http://jsonschema.net/entryrhsp/entryrhspId",
              "type": "string"
            }
          },
          "required": [
            "entryrhspId"
          ]
        }
      },
      "required": [
        "entryrhsp"
      ]
    },
    "id_entryrhy_json": {
      "type": "object",
      "properties": {
        "entryrhy": {
          "type": "object",
          "properties": {
            "entryrhyId": {
              "type": "string"
            }
          },
          "required": [
            "entryrhyId"
          ]
        }
      },
      "required": [
        "entryrhy"
      ]
    },
    "id_entryssvf_json": {
      "type": "object",
      "properties": {
        "entryssvf": {
          "id": "entryssvf",
          "type": "object",
          "properties": {
            "entryssvfId": {
              "id": "entryssvfId",
              "type": "string"
            }
          },
          "required": [
            "entryssvfId"
          ]
        }
      },
      "required": [
        "entryssvf"
      ]
    },
    "id_exithousingassesment_json": {
      "type": "object",
      "properties": {
        "exithousingassessment": {
          "type": "object",
          "properties": {
            "exithousingassessmentId": {
              "type": "string"
            }
          },
          "required": [
            "exithousingassessmentId"
          ]
        }
      },
      "required": [
        "exithousingassessment"
      ]
    },
    "id_exitpath_json": {
      "type": "object",
      "properties": {
        "exitpath": {
          "type": "object",
          "properties": {
            "exitpathId": {
              "type": "string"
            }
          },
          "required": [
            "exitpathId"
          ]
        }
      },
      "required": [
        "exitpath"
      ]
    },
    "id_exitrhy_json": {
      "type": "object",
      "properties": {
        "exitrhy": {
          "type": "object",
          "properties": {
            "exitrhyId": {
              "type": "string"
            }
          },
          "required": [
            "exitrhyId"
          ]
        }
      },
      "required": [
        "exitrhy"
      ]
    },
    "id_exits_json": {
      "type": "object",
      "properties": {
        "exit": {
          "id": "http://jsonschema.net/exit",
          "type": "object",
          "properties": {
            "exitId": {
              "id": "http://jsonschema.net/exit/exitId",
              "type": "string"
            }
          },
          "required": [
            "exitId"
          ]
        }
      },
      "required": [
        "exit"
      ]
    },
    "id_funders_json": {
      "type": "object",
      "properties": {
        "funder": {
          "type": "object",
          "properties": {
            "funderId": {
              "type": "string"
            }
          },
          "required": [
            "funderId"
          ]
        }
      },
      "required": [
        "funder"
      ]
    },
    "id_healthinsurance_json": {
      "type": "object",
      "properties": {
        "healthinsurance": {
          "id": "http://jsonschema.net/healthinsurance",
          "type": "object",
          "properties": {
            "healthinsuranceId": {
              "id": "http://jsonschema.net/healthinsurance/healthinsuranceId",
              "type": "string"
            }
          },
          "required": [
            "healthinsuranceId"
          ]
        }
      },
      "required": [
        "healthinsurance"
      ]
    },
    "id_healthstatus_json": {
      "type": "object",
      "properties": {
        "healthstatus": {
          "id": "http://jsonschema.net/healthstatus",
          "type": "object",
          "properties": {
            "healthstatusId": {
              "id": "http://jsonschema.net/healthstatus/healthstatusId",
              "type": "string"
            }
          },
          "required": [
            "healthstatusId"
          ]
        }
      },
      "required": [
        "healthstatus"
      ]
    },
    "id_housingassesmentdispositions_json": {
      "type": "object",
      "properties": {
        "housingAssessmentDisposition": {
          "type": "object",
          "properties": {
            "housingAssessmentDispositionId": {
              "type": "string"
            }
          },
          "required": [
            "housingAssessmentDispositionId"
          ]
        }
      },
      "required": [
        "housingAssessmentDisposition"
      ]
    },
    "id_incomeandsources_json": {
      "type": "object",
      "properties": {
        "incomeAndSource": {
          "id": "http://jsonschema.net/incomeAndSource",
          "type": "object",
          "properties": {
            "incomeAndSourceId": {
              "id": "http://jsonschema.net/incomeAndSource/incomeAndSourceId",
              "type": "string"
            },
            "alimonyamount": {
              "id": "http://jsonschema.net/incomeAndSource/alimonyamount",
              "type": "integer"
            },
            "childsupportamount": {
              "id": "http://jsonschema.net/incomeAndSource/childsupportamount",
              "type": "integer"
            },
            "earnedamount": {
              "id": "http://jsonschema.net/incomeAndSource/earnedamount",
              "type": "integer"
            },
            "gaamount": {
              "id": "http://jsonschema.net/incomeAndSource/gaamount",
              "type": "integer"
            },
            "othersourceamount": {
              "id": "http://jsonschema.net/incomeAndSource/othersourceamount",
              "type": "integer"
            },
            "pensionamount": {
              "id": "http://jsonschema.net/incomeAndSource/pensionamount",
              "type": "integer"
            },
            "privatedisabilityamount": {
              "id": "http://jsonschema.net/incomeAndSource/privatedisabilityamount",
              "type": "integer"
            },
            "socsecretirementamount": {
              "id": "http://jsonschema.net/incomeAndSource/socsecretirementamount",
              "type": "integer"
            },
            "ssdiamount": {
              "id": "http://jsonschema.net/incomeAndSource/ssdiamount",
              "type": "integer"
            },
            "ssiamount": {
              "id": "http://jsonschema.net/incomeAndSource/ssiamount",
              "type": "integer"
            },
            "tanfamount": {
              "id": "http://jsonschema.net/incomeAndSource/tanfamount",
              "type": "integer"
            },
            "totalmonthlyincome": {
              "id": "http://jsonschema.net/incomeAndSource/totalmonthlyincome",
              "type": "integer"
            },
            "unemploymentamount": {
              "id": "http://jsonschema.net/incomeAndSource/unemploymentamount",
              "type": "integer"
            },
            "vadisabilitynonserviceamount": {
              "id": "http://jsonschema.net/incomeAndSource/vadisabilitynonserviceamount",
              "type": "integer"
            },
            "vadisabilityserviceamount": {
              "id": "http://jsonschema.net/incomeAndSource/vadisabilityserviceamount",
              "type": "integer"
            },
            "workerscompamount": {
              "id": "http://jsonschema.net/incomeAndSource/workerscompamount",
              "type": "integer"
            }
          },
          "required": [
            "incomeAndSourceId",
            "alimonyamount",
            "childsupportamount",
            "earnedamount",
            "gaamount",
            "othersourceamount",
            "pensionamount",
            "privatedisabilityamount",
            "socsecretirementamount",
            "ssdiamount",
            "ssiamount",
            "tanfamount",
            "totalmonthlyincome",
            "unemploymentamount",
            "vadisabilitynonserviceamount",
            "vadisabilityserviceamount",
            "workerscompamount"
          ]
        }
      },
      "required": [
        "incomeAndSource"
      ]
    },
    "id_inventories_json": {
      "type": "object",
      "properties": {
        "inventory": {
          "type": "object",
          "properties": {
            "inventoryId": {
              "type": "string"
            }
          },
          "required": [
            "inventoryId"
          ]
        }
      },
      "required": [
        "inventory"
      ]
    },
    "id_medicalassistances_json": {
      "type": "object",
      "properties": {
        "medicalassistance": {
          "id": "http://jsonschema.net/medicalassistance",
          "type": "object",
          "properties": {
            "medicalassistanceId": {
              "id": "http://jsonschema.net/medicalassistance/medicalassistanceId",
              "type": "string"
            }
          },
          "required": [
            "medicalassistanceId"
          ]
        }
      },
      "required": [
        "medicalassistance"
      ]
    },
    "id_noncashbenefits_json": {
      "type": "object",
      "properties": {
        "noncashbenefits": {
          "id": "http://jsonschema.net/noncashbenefits",
          "type": "object",
          "properties": {
            "noncashbenefitsID": {
              "id": "http://jsonschema.net/noncashbenefits/noncashbenefitsID",
              "type": "string"
            }
          },
          "required": [
            "noncashbenefitsID"
          ]
        }
      },
      "required": [
        "noncashbenefits"
      ]
    },
    "id_organization_json": {
      "type": "object",
      "properties": {
        "organization": {
          "type": "object",
          "properties": {
            "organizationId": {
              "type": "string"
            },
            "organizationName": {
              "type": "string"
            },
            "organizationCommonName": {
              "type": "string"
            }
          },
          "required": [
            "organizationId",
            "organizationName",
            "organizationCommonName"
          ]
        }
      },
      "required": [
        "organization"
      ]
    },
    "id_pathstatus_json": {
      "type": "object",
      "properties": {
        "pathstatus": {
          "id": "http://jsonschema.net/pathstatus",
          "type": "object",
          "properties": {
            "pathstatusId": {
              "id": "http://jsonschema.net/pathstatus/pathstatusId",
              "type": "string"
            }
          },
          "required": [
            "pathstatusId"
          ]
        }
      },
      "required": [
        "pathstatus"
      ]
    },
    "id_projectcoc_json": {
      "type": "object",
      "properties": {
        "projectcoc": {
          "id": "projectcoc",
          "type": "object",
          "properties": {
            "projectcocId": {
              "id": "projectcocId",
              "type": "string"
            }
          },
          "required": [
            "projectcocId"
          ]
        }
      },
      "required": [
        "projectcoc"
      ]
    },
    "id_projects_json": {
      "type": "object",
      "properties": {
        "project": {
          "id": "http://jsonschema.net/project",
          "type": "object",
          "properties": {
            "projectId": {
              "id": "http://jsonschema.net/project/projectId",
              "type": "string"
            }
          },
          "required": [
            "projectId"
          ]
        }
      },
      "required": [
        "project"
      ]
    },
    "id_residentialmoveindate_json": {
      "type": "object",
      "properties": {
        "residentialmoveindate": {
          "id": "residentialmoveindate",
          "type": "object",
          "properties": {
            "residentialmoveindateId": {
              "id": "residentialmoveindateId",
              "type": "string"
            }
          },
          "required": [
            "residentialmoveindateId"
          ]
        }
      },
      "required": [
        "residentialmoveindate"
      ]
    },
    "id_servicefareferral_json": {
      "type": "object",
      "properties": {
        "servicefareferral": {
          "type": "object",
          "properties": {
            "servicefareferralId": {
              "type": "string"
            }
          },
          "required": [
            "servicefareferralId"
          ]
        }
      },
      "required": [
        "servicefareferral"
      ]
    },
    "id_sites_json": {
      "type": "object",
      "properties": {
        "site": {
          "type": "object",
          "properties": {
            "siteId": {
              "type": "string"
            }
          },
          "required": [
            "siteId"
          ]
        }
      },
      "required": [
        "site"
      ]
    },
    "id_veteraninfo_json": {
      "type": "object",
      "properties": {
        "veteranInfo": {
          "type": "object",
          "properties": {
            "veteranInfoId": {
              "type": "string"
            }
          },
          "required": [
            "veteranInfoId"
          ]
        }
      },
      "required": [
        "veteranInfo"
      ]
    },
    "incomeandsource_id_json": {
      "type": "object",
      "properties": {
        "incomeAndSource": {
          "type": "object",
          "properties": {
            "incomeAndSourceId": {
              "type": "string"
            },
            "alimony": {
              "type": "integer"
            },
            "alimonyamount": {
              "type": "number"
            },
            "childsupport": {
              "type": "integer"
            },
            "childsupportamount": {
              "type": "number"
            },
            "earned": {
              "type": "integer"
            },
            "earnedamount": {
              "type": "number"
            },
            "ga": {
              "type": "integer"
            },
            "gaamount": {
              "type": "number"
            },
            "incomefromanysource": {
              "type": "integer"
            },
            "othersource": {
              "type": "integer"
            },
            "othersourceamount": {
              "type": "number"
            },
            "othersourceidentify": {
              "type": "string"
            },
            "pension": {
              "type": "integer"
            },
            "pensionamount": {
              "type": "number"
            },
            "privatedisability": {
              "type": "integer"
            },
            "privatedisabilityamount": {
              "type": "number"
            },
            "socsecretirement": {
              "type": "integer"
            },
            "socsecretirementamount": {
              "type": "number"
            },
            "ssdi": {
              "type": "integer"
            },
            "ssdiamount": {
              "type": "number"
            },
            "ssi": {
              "type": "integer"
            },
            "ssiamount": {
              "type": "number"
            },
            "tanf": {
              "type": "integer"
            },
            "tanfamount": {
              "type": "number"
            },
            "totalmonthlyincome": {
              "type": "number"
            },
            "unemployment": {
              "type": "integer"
            },
            "unemploymentamount": {
              "type": "number"
            },
            "vadisabilitynonservice": {
              "type": "integer"
            },
            "vadisabilitynonserviceamount": {
              "type": "number"
            },
            "vadisabilityservice": {
              "type": "integer"
            },
            "vadisabilityserviceamount": {
              "type": "number"
            },
            "workerscomp": {
              "type": "integer"
            },
            "workerscompamount": {
              "type": "number"
            },
            "dateCreated": {
              "type": "string"
            },
            "dateUpdated": {
              "type": "string"
            }
          },
          "required": [
            "incomeAndSourceId",
            "alimony",
            "alimonyamount",
            "childsupport",
            "childsupportamount",
            "earned",
            "earnedamount",
            "ga",
            "gaamount",
            "incomefromanysource",
            "othersource",
            "othersourceamount",
            "othersourceidentify",
            "pension",
            "pensionamount",
            "privatedisability",
            "privatedisabilityamount",
            "socsecretirement",
            "socsecretirementamount",
            "ssdi",
            "ssdiamount",
            "ssi",
            "ssiamount",
            "tanf",
            "tanfamount",
            "totalmonthlyincome",
            "unemployment",
            "unemploymentamount",
            "vadisabilitynonservice",
            "vadisabilitynonserviceamount",
            "vadisabilityservice",
            "vadisabilityserviceamount",
            "workerscomp",
            "workerscompamount",
            "dateCreated",
            "dateUpdated"
          ]
        }
      },
      "required": [
        "incomeAndSource"
      ]
    },
    "incomeandsources_ids_json": {
      "type": "object",
      "properties": {
        "IncomeAndSources": {
          "id": "http://jsonschema.net/IncomeAndSources",
          "type": "object",
          "properties": {
            "pagination": {
              "id": "http://jsonschema.net/IncomeAndSources/pagination",
              "type": "object",
              "properties": {
                "from": {
                  "id": "http://jsonschema.net/IncomeAndSources/pagination/from",
                  "type": "integer"
                },
                "returned": {
                  "id": "http://jsonschema.net/IncomeAndSources/pagination/returned",
                  "type": "integer"
                },
                "total": {
                  "id": "http://jsonschema.net/IncomeAndSources/pagination/total",
                  "type": "integer"
                },
                "maximum": {
                  "id": "http://jsonschema.net/IncomeAndSources/pagination/maximum",
                  "type": "integer"
                },
                "sort": {
                  "id": "http://jsonschema.net/IncomeAndSources/pagination/sort",
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "incomeAndSources": {
              "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources",
              "type": "array",
              "items": {
                "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0",
                "type": "object",
                "properties": {
                  "incomeAndSourceId": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/incomeAndSourceId",
                    "type": "string"
                  },
                  "alimony": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/alimony",
                    "type": "integer"
                  },
                  "alimonyamount": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/alimonyamount",
                    "type": "number"
                  },
                  "childsupport": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/childsupport",
                    "type": "integer"
                  },
                  "childsupportamount": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/childsupportamount",
                    "type": "number"
                  },
                  "earned": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/earned",
                    "type": "integer"
                  },
                  "earnedamount": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/earnedamount",
                    "type": "number"
                  },
                  "ga": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/ga",
                    "type": "integer"
                  },
                  "gaamount": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/gaamount",
                    "type": "number"
                  },
                  "incomefromanysource": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/incomefromanysource",
                    "type": "integer"
                  },
                  "othersource": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/othersource",
                    "type": "integer"
                  },
                  "othersourceamount": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/othersourceamount",
                    "type": "number"
                  },
                  "othersourceidentify": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/othersourceidentify",
                    "type": "string"
                  },
                  "pension": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/pension",
                    "type": "integer"
                  },
                  "pensionamount": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/pensionamount",
                    "type": "number"
                  },
                  "privatedisability": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/privatedisability",
                    "type": "integer"
                  },
                  "privatedisabilityamount": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/privatedisabilityamount",
                    "type": "number"
                  },
                  "socsecretirement": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/socsecretirement",
                    "type": "integer"
                  },
                  "socsecretirementamount": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/socsecretirementamount",
                    "type": "number"
                  },
                  "ssdi": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/ssdi",
                    "type": "integer"
                  },
                  "ssdiamount": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/ssdiamount",
                    "type": "number"
                  },
                  "ssi": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/ssi",
                    "type": "integer"
                  },
                  "ssiamount": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/ssiamount",
                    "type": "number"
                  },
                  "tanf": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/tanf",
                    "type": "integer"
                  },
                  "tanfamount": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/tanfamount",
                    "type": "number"
                  },
                  "totalmonthlyincome": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/totalmonthlyincome",
                    "type": "number"
                  },
                  "unemployment": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/unemployment",
                    "type": "integer"
                  },
                  "unemploymentamount": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/unemploymentamount",
                    "type": "number"
                  },
                  "vadisabilitynonservice": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/vadisabilitynonservice",
                    "type": "integer"
                  },
                  "vadisabilitynonserviceamount": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/vadisabilitynonserviceamount",
                    "type": "number"
                  },
                  "vadisabilityservice": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/vadisabilityservice",
                    "type": "integer"
                  },
                  "vadisabilityserviceamount": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/vadisabilityserviceamount",
                    "type": "number"
                  },
                  "workerscomp": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/workerscomp",
                    "type": "integer"
                  },
                  "workerscompamount": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/workerscompamount",
                    "type": "number"
                  },
                  "dateCreated": {
                    "id": "http://jsonschema.net/IncomeAndSources/incomeAndSources/0/dateCreated",
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": [
            "pagination",
            "incomeAndSources"
          ]
        }
      },
      "required": [
        "IncomeAndSources"
      ]
    },
    "incomeandsource_json": {
      "type": "object",
      "properties": {
        "incomeAndSource": {
          "id": "incomeAndSource",
          "type": "object",
          "properties": {
            "alimony": {
              "id": "alimony",
              "type": "integer"
            },
            "alimonyamount": {
              "id": "alimonyamount",
              "type": "number"
            },
            "childsupport": {
              "id": "childsupport",
              "type": "integer"
            },
            "childsupportamount": {
              "id": "childsupportamount",
              "type": "number"
            },
            "earned": {
              "id": "earned",
              "type": "integer"
            },
            "earnedamount": {
              "id": "earnedamount",
              "type": "number"
            },
            "ga": {
              "id": "ga",
              "type": "integer"
            },
            "gaamount": {
              "id": "gaamount",
              "type": "number"
            },
            "incomefromanysource": {
              "id": "incomefromanysource",
              "type": "integer"
            },
            "othersource": {
              "id": "othersource",
              "type": "integer"
            },
            "othersourceamount": {
              "id": "othersourceamount",
              "type": "number"
            },
            "othersourceidentify": {
              "id": "othersourceidentify",
              "type": "string"
            },
            "pension": {
              "id": "pension",
              "type": "integer"
            },
            "pensionamount": {
              "id": "pensionamount",
              "type": "number"
            },
            "privatedisability": {
              "id": "privatedisability",
              "type": "integer"
            },
            "privatedisabilityamount": {
              "id": "privatedisabilityamount",
              "type": "number"
            },
            "socsecretirement": {
              "id": "socsecretirement",
              "type": "integer"
            },
            "socsecretirementamount": {
              "id": "socsecretirementamount",
              "type": "number"
            },
            "ssdi": {
              "id": "ssdi",
              "type": "integer"
            },
            "ssdiamount": {
              "id": "ssdiamount",
              "type": "number"
            },
            "ssi": {
              "id": "ssi",
              "type": "integer"
            },
            "ssiamount": {
              "id": "ssiamount",
              "type": "number"
            },
            "tanf": {
              "id": "tanf",
              "type": "integer"
            },
            "tanfamount": {
              "id": "tanfamount",
              "type": "number"
            },
            "totalmonthlyincome": {
              "id": "totalmonthlyincome",
              "type": "number"
            },
            "unemployment": {
              "id": "unemployment",
              "type": "integer"
            },
            "unemploymentamount": {
              "id": "unemploymentamount",
              "type": "number"
            },
            "vadisabilitynonservice": {
              "id": "vadisabilitynonservice",
              "type": "integer"
            },
            "vadisabilitynonserviceamount": {
              "id": "vadisabilitynonserviceamount",
              "type": "number"
            },
            "vadisabilityservice": {
              "id": "vadisabilityservice",
              "type": "integer"
            },
            "vadisabilityserviceamount": {
              "id": "vadisabilityserviceamount",
              "type": "number"
            },
            "workerscomp": {
              "id": "workerscomp",
              "type": "integer"
            },
            "workerscompamount": {
              "id": "workerscompamount",
              "type": "number"
            }
          },
          "required": [
            "alimony",
            "alimonyamount",
            "childsupport",
            "childsupportamount",
            "earned",
            "earnedamount",
            "ga",
            "gaamount",
            "incomefromanysource",
            "othersource",
            "othersourceamount",
            "othersourceidentify",
            "pension",
            "pensionamount",
            "privatedisability",
            "privatedisabilityamount",
            "socsecretirement",
            "socsecretirementamount",
            "ssdi",
            "ssdiamount",
            "ssi",
            "ssiamount",
            "tanf",
            "tanfamount",
            "totalmonthlyincome",
            "unemployment",
            "unemploymentamount",
            "vadisabilitynonservice",
            "vadisabilitynonserviceamount",
            "vadisabilityservice",
            "vadisabilityserviceamount",
            "workerscomp",
            "workerscompamount"
          ]
        }
      },
      "required": [
        "incomeAndSource"
      ]
    },
    "inventories_id_json": {
      "type": "object",
      "properties": {
        "inventory": {
          "type": "object",
          "properties": {
            "inventoryId": {
              "type": "string"
            },
            "availabilty": {
              "type": "integer"
            },
            "bedtype": {
              "type": "integer"
            },
            "hmisparticipatingbeds": {
              "type": "integer"
            },
            "householdtype": {
              "type": "integer"
            },
            "chbedinventory": {
              "type": "integer"
            },
            "vetbedinventory": {
              "type": "integer"
            },
            "youthbedinventory": {
              "type": "integer"
            },
            "youthagegroup": {
              "type": "integer"
            },
            "unitinventory": {
              "type": "integer"
            },
            "dateCreated": {
              "type": "string"
            },
            "dateUpdated": {
              "type": "string"
            },
            "inventoryenddate": {
              "type": "string"
            },
            "inventorystartdate": {
              "type": "string"
            }
          },
          "required": [
            "inventoryId",
            "availabilty",
            "bedtype",
            "hmisparticipatingbeds",
            "householdtype",
            "chbedinventory",
            "vetbedinventory",
            "youthbedinventory",
            "youthagegroup",
            "unitinventory",
            "dateCreated",
            "dateUpdated",
            "inventoryenddate",
            "inventorystartdate"
          ]
        }
      },
      "required": [
        "inventory"
      ]
    },
    "inventories_ids_json": {
      "type": "object",
      "properties": {
        "Inventories": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "inventories": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "inventoryId": {
                    "type": "string"
                  },
                  "availabilty": {
                    "type": "integer"
                  },
                  "bedtype": {
                    "type": "integer"
                  },
                  "hmisparticipatingbeds": {
                    "type": "integer"
                  },
                  "householdtype": {
                    "type": "integer"
                  },
                  "chbedinventory": {
                    "type": "integer"
                  },
                  "vetbedinventory": {
                    "type": "integer"
                  },
                  "youthbedinventory": {
                    "type": "integer"
                  },
                  "youthagegroup": {
                    "type": "integer"
                  },
                  "unitinventory": {
                    "type": "integer"
                  },
                  "dateCreated": {
                    "type": "string"
                  },
                  "inventoryenddate": {
                    "type": "string"
                  },
                  "inventorystartdate": {
                    "type": "string"
                  }
                },
                "required": [
                  "inventoryId",
                  "availabilty",
                  "bedtype",
                  "hmisparticipatingbeds",
                  "householdtype",
                  "chbedinventory",
                  "vetbedinventory",
                  "youthbedinventory",
                  "youthagegroup",
                  "unitinventory",
                  "dateCreated",
                  "inventoryenddate",
                  "inventorystartdate"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "inventories"
          ]
        }
      },
      "required": [
        "Inventories"
      ]
    },
    "inventories_json": {
      "type": "object",
      "properties": {
        "inventory": {
          "type": "object",
          "properties": {
            "availabilty": {
              "type": "string"
            },
            "bedinventory": {
              "type": "string"
            },
            "bedtype": {
              "type": "integer"
            },
            "hmisparticipatingbeds": {
              "type": "integer"
            },
            "householdtype": {
              "type": "integer"
            },
            "inventoryenddate": {
              "type": "string"
            },
            "inventorystartdate": {
              "type": "string"
            },
            "unitinventory": {
              "type": "integer"
            },
            "chbedinventory": {
              "type": "integer"
            },
            "vetbedinventory": {
              "type": "integer"
            },
            "youthbedinventory": {
              "type": "integer"
            },
            "youthagegroup": {
              "type": "integer"
            }
          },
          "required": [
            "availabilty",
            "bedinventory",
            "bedtype",
            "hmisparticipatingbeds",
            "householdtype",
            "inventoryenddate",
            "inventorystartdate",
            "unitinventory",
            "chbedinventory",
            "vetbedinventory",
            "youthbedinventory",
            "youthagegroup"
          ]
        }
      },
      "required": [
        "inventory"
      ]
    },
    "medicalassistance_json": {
      "type": "object",
      "properties": {
        "medicalassistance": {
          "type": "object",
          "properties": {
            "adap": {
              "type": "integer"
            },
            "informationDate": {
              "type": "string"
            },
            "hivaidsassistance": {
              "type": "integer"
            },
            "nohivaidsassistancereason": {
              "type": "integer"
            },
            "noadapreason": {
              "type": "integer"
            }
          },
          "required": [
            "adap",
            "informationDate",
            "hivaidsassistance",
            "nohivaidsassistancereason",
            "noadapreason"
          ]
        }
      },
      "required": [
        "medicalassistance"
      ]
    },
    "medicalassistances_ids_json": {
      "type": "object",
      "properties": {
        "medicalassistances": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "medicalassistances": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "medicalassistanceId": {
                    "type": "string"
                  },
                  "hivaidsassistance": {
                    "type": "integer"
                  },
                  "nohivaidsassistancereason": {
                    "type": "integer"
                  },
                  "adap": {
                    "type": "integer"
                  },
                  "noadapreason": {
                    "type": "integer"
                  },
                  "informationDate": {
                    "type": "string"
                  }
                },
                "required": [
                  "medicalassistanceId",
                  "hivaidsassistance",
                  "nohivaidsassistancereason",
                  "adap",
                  "noadapreason",
                  "informationDate"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "medicalassistances"
          ]
        }
      },
      "required": [
        "medicalassistances"
      ]
    },
    "medicalassistances_id_json": {
      "type": "object",
      "properties": {
        "medicalassistance": {
          "type": "object",
          "properties": {
            "medicalassistanceId": {
              "type": "string"
            },
            "hivaidsassistance": {
              "type": "integer"
            },
            "nohivaidsassistancereason": {
              "type": "integer"
            },
            "adap": {
              "type": "integer"
            },
            "noadapreason": {
              "type": "integer"
            },
            "informationDate": {
              "type": "string"
            }
          },
          "required": [
            "medicalassistanceId",
            "hivaidsassistance",
            "nohivaidsassistancereason",
            "adap",
            "noadapreason",
            "informationDate"
          ]
        }
      },
      "required": [
        "medicalassistance"
      ]
    },
    "noncashbenefits_id_json": {
      "type": "object",
      "properties": {
        "noncashbenefits": {
          "type": "object",
          "properties": {
            "noncashbenefitsID": {
              "type": "string"
            },
            "benefitsfromanysource": {
              "type": "integer"
            },
            "othersource": {
              "type": "integer"
            },
            "othersourceidentify": {
              "type": "string"
            },
            "othertanf": {
              "type": "integer"
            },
            "rentalassistanceongoing": {
              "type": "integer"
            },
            "rentalassistancetemp": {
              "type": "integer"
            },
            "snap": {
              "type": "integer"
            },
            "tanfchildcare": {
              "type": "integer"
            },
            "tanftransportation": {
              "type": "integer"
            },
            "wic": {
              "type": "integer"
            }
          },
          "required": [
            "noncashbenefitsID",
            "benefitsfromanysource",
            "othersource",
            "othersourceidentify",
            "othertanf",
            "rentalassistanceongoing",
            "rentalassistancetemp",
            "snap",
            "tanfchildcare",
            "tanftransportation",
            "wic"
          ]
        }
      },
      "required": [
        "noncashbenefits"
      ]
    },
    "noncashbenefits_json": {
      "type": "object",
      "properties": {
        "noncashbenefits": {
          "type": "object",
          "properties": {
            "benefitsfromanysource": {
              "type": "integer"
            },
            "othersource": {
              "type": "integer"
            },
            "othertanf": {
              "type": "integer"
            },
            "rentalassistanceongoing": {
              "type": "integer"
            },
            "rentalassistancetemp": {
              "type": "integer"
            },
            "snap": {
              "type": "integer"
            },
            "tanfchildcare": {
              "type": "integer"
            },
            "tanftransportation": {
              "type": "integer"
            },
            "wic": {
              "type": "integer"
            },
            "othersourceidentify": {
              "type": "string"
            }
          },
          "required": [
            "benefitsfromanysource",
            "othersource",
            "othertanf",
            "rentalassistanceongoing",
            "rentalassistancetemp",
            "snap",
            "tanfchildcare",
            "tanftransportation",
            "wic",
            "othersourceidentify"
          ]
        }
      },
      "required": [
        "noncashbenefits"
      ]
    },
    "noncashbenefits_ids_json": {
      "type": "object",
      "properties": {
        "noncashbenefitsList": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "noncashbenefitsList": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "noncashbenefitsID": {
                    "type": "string"
                  },
                  "benefitsfromanysource": {
                    "type": "integer"
                  },
                  "othersource": {
                    "type": "integer"
                  },
                  "othersourceidentify": {
                    "type": "string"
                  },
                  "othertanf": {
                    "type": "integer"
                  },
                  "rentalassistanceongoing": {
                    "type": "integer"
                  },
                  "rentalassistancetemp": {
                    "type": "integer"
                  },
                  "snap": {
                    "type": "integer"
                  },
                  "tanfchildcare": {
                    "type": "integer"
                  },
                  "tanftransportation": {
                    "type": "integer"
                  },
                  "wic": {
                    "type": "integer"
                  }
                },
                "required": [
                  "noncashbenefitsID",
                  "benefitsfromanysource",
                  "othersource",
                  "othersourceidentify",
                  "othertanf",
                  "rentalassistanceongoing",
                  "rentalassistancetemp",
                  "snap",
                  "tanfchildcare",
                  "tanftransportation",
                  "wic"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "noncashbenefitsList"
          ]
        }
      },
      "required": [
        "noncashbenefitsList"
      ]
    },
    "pathstatus_id_json": {
      "type": "object",
      "properties": {
        "pathstatus": {
          "type": "object",
          "properties": {
            "pathstatusId": {
              "type": "string"
            },
            "clientEnrolledInPath": {
              "type": "integer"
            },
            "reasonNotEnrolled": {
              "type": "integer"
            },
            "dateOfStatus": {
              "type": "string"
            }
          },
          "required": [
            "pathstatusId",
            "clientEnrolledInPath",
            "reasonNotEnrolled",
            "dateOfStatus"
          ]
        }
      },
      "required": [
        "pathstatus"
      ]
    },
    "pathstatus_ids_json": {
      "type": "object",
      "properties": {
        "pathstatuses": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "pathstatuses": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "pathstatusId": {
                    "type": "string"
                  },
                  "clientEnrolledInPath": {
                    "type": "integer"
                  },
                  "reasonNotEnrolled": {
                    "type": "integer"
                  },
                  "dateOfStatus": {
                    "type": "string"
                  }
                },
                "required": [
                  "pathstatusId",
                  "clientEnrolledInPath",
                  "reasonNotEnrolled",
                  "dateOfStatus"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "pathstatuses"
          ]
        }
      },
      "required": [
        "pathstatuses"
      ]
    },
    "pathstatus_json": {
      "type": "object",
      "properties": {
        "pathstatus": {
          "type": "object",
          "properties": {
            "clientenrolledinpath": {
              "type": "integer"
            },
            "dateOfStatus": {
              "type": "string"
            },
            "clientEnrolledInPath": {
              "type": "integer"
            },
            "reasonNotEnrolled": {
              "type": "integer"
            }
          },
          "required": [
            "clientenrolledinpath",
            "dateOfStatus",
            "clientEnrolledInPath",
            "reasonNotEnrolled"
          ]
        }
      },
      "required": [
        "pathstatus"
      ]
    },
    "project_json": {
      "type": "object",
      "properties": {
        "project": {
          "type": "object",
          "properties": {
            "projectName": {
              "type": "string"
            },
            "projectCommonName": {
              "type": "string"
            },
            "continuumProject": {
              "type": "integer"
            },
            "projectType": {
              "type": "integer"
            },
            "residentialAffiliation": {
              "type": "integer"
            },
            "targetPopulation": {
              "type": "integer"
            },
            "trackingMethod": {
              "type": "integer"
            }
          },
          "required": [
            "projectName",
            "projectCommonName",
            "continuumProject",
            "projectType",
            "residentialAffiliation",
            "targetPopulation",
            "trackingMethod"
          ]
        }
      },
      "required": [
        "project"
      ]
    },
    "organization_json": {
      "type": "object",
      "properties": {
        "organization": {
          "type": "object",
          "properties": {
            "organizationName": {
              "type": "string"
            },
            "organizationCommonName": {
              "type": "string"
            }
          },
          "required": [
            "organizationName",
            "organizationCommonName"
          ]
        }
      },
      "required": [
        "organization"
      ]
    },
    "projectcoc_id_json": {
      "type": "object",
      "properties": {
        "projectcoc": {
          "type": "object",
          "properties": {
            "projectcocId": {
              "type": "string"
            },
            "coccode": {
              "type": "string"
            },
            "dateCreated": {
              "type": "string"
            },
            "dateUpdated": {
              "type": "string"
            }
          },
          "required": [
            "projectcocId",
            "coccode",
            "dateCreated",
            "dateUpdated"
          ]
        }
      },
      "required": [
        "projectcoc"
      ]
    },
    "projectcoc_ids_json": {
      "type": "object",
      "properties": {
        "projectcocs": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "projectcocs": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "projectcocId": {
                    "type": "string"
                  },
                  "coccode": {
                    "type": "string"
                  },
                  "dateCreated": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectcocId",
                  "coccode",
                  "dateCreated"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "projectcocs"
          ]
        }
      },
      "required": [
        "projectcocs"
      ]
    },
    "projectcoc_json": {
      "type": "object",
      "properties": {
        "projectcoc": {
          "id": "projectcoc",
          "type": "object",
          "properties": {
            "coccode": {
              "id": "coccode",
              "type": "string"
            }
          },
          "required": [
            "coccode"
          ]
        }
      },
      "required": [
        "projectcoc"
      ]
    },
    "organization_id_json": {
      "type": "object",
      "properties": {
        "organization": {
          "type": "object",
          "properties": {
            "organizationId": {
              "type": "string"
            },
            "organizationCommonName": {
              "type": "string"
            }
          },
          "required": [
            "organizationId",
            "organizationCommonName"
          ]
        }
      },
      "required": [
        "organization"
      ]
    },
    "organization_ids_json": {
      "type": "object",
      "properties": {
        "Organizations": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "organizations": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "organizationId": {
                    "type": "string"
                  },
                  "organizationCommonName": {
                    "type": "string"
                  },
                  "organizationName": {
                    "type": "string"
                  }
                },
                "required": [
                  "organizationId",
                  "organizationCommonName",
                  "organizationName"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "organizations"
          ]
        }
      },
      "required": [
        "Organizations"
      ]
    },
    "projects_id_json": {
      "type": "object",
      "properties": {
        "project": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string"
            },
            "projectName": {
              "type": "string"
            },
            "projectCommonName": {
              "type": "string"
            },
            "continuumProject": {
              "type": "integer"
            },
            "projectType": {
              "type": "integer"
            },
            "targetPopulation": {
              "type": "integer"
            },
            "trackingMethod": {
              "type": "integer"
            },
            "dateCreated": {
              "type": "string"
            },
            "dateUpdated": {
              "type": "string"
            }
          },
          "required": [
            "projectId",
            "projectName",
            "projectCommonName",
            "continuumProject",
            "projectType",
            "targetPopulation",
            "trackingMethod",
            "dateCreated",
            "dateUpdated"
          ]
        }
      },
      "required": [
        "project"
      ]
    },
    "projects_ids_json": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "projects": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "string"
                  },
                  "projectName": {
                    "type": "string"
                  },
                  "projectCommonName": {
                    "type": "string"
                  },
                  "continuumProject": {
                    "type": "integer"
                  },
                  "projectType": {
                    "type": "integer"
                  },
                  "residentialAffiliation": {
                    "type": "integer"
                  },
                  "targetPopulation": {
                    "type": "integer"
                  },
                  "trackingMethod": {
                    "type": "integer"
                  },
                  "dateCreated": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": [
            "pagination",
            "projects"
          ]
        }
      },
      "required": [
        "projects"
      ]
    },
    "residentialmoveindate_id_json": {
      "type": "object",
      "properties": {
        "residentialmoveindate": {
          "type": "object",
          "properties": {
            "residentialmoveindateId": {
              "type": "string"
            },
            "inpermanenthousing": {
              "type": "integer"
            }
          },
          "required": [
            "residentialmoveindateId",
            "inpermanenthousing"
          ]
        }
      },
      "required": [
        "residentialmoveindate"
      ]
    },
    "residentialmoveindate_ids_json": {
      "type": "object",
      "properties": {
        "residentialmoveindates": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "residentialmoveindates": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "residentialmoveindateId": {
                    "type": "string"
                  },
                  "inpermanenthousing": {
                    "type": "integer"
                  },
                  "residentialmoveindate": {
                    "type": "string"
                  }
                },
                "required": [
                  "residentialmoveindateId",
                  "inpermanenthousing",
                  "residentialmoveindate"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "residentialmoveindates"
          ]
        }
      },
      "required": [
        "residentialmoveindates"
      ]
    },
    "residentialmoveindate_json": {
      "type": "object",
      "properties": {
        "residentialmoveindate": {
          "type": "object",
          "properties": {
            "inpermanenthousing": {
              "type": "integer"
            },
            "residentialmoveindate": {
              "type": "string"
            }
          },
          "required": [
            "inpermanenthousing",
            "residentialmoveindate"
          ]
        }
      },
      "required": [
        "residentialmoveindate"
      ]
    },
    "servicefareferral_id_json": {
      "type": "object",
      "properties": {
        "servicefareferral": {
          "type": "object",
          "properties": {
            "servicefareferralId": {
              "type": "string"
            },
            "serviceCategory": {
              "type": "integer"
            },
            "funderList": {
              "type": "integer"
            },
            "typeProvided": {
              "type": "integer"
            },
            "otherTypeProvided": {
              "type": "string"
            },
            "subTypeProvided": {
              "type": "integer"
            },
            "faAmount": {
              "type": "number"
            },
            "referralOutcome": {
              "type": "integer"
            }
          },
          "required": [
            "servicefareferralId",
            "serviceCategory",
            "funderList",
            "typeProvided",
            "otherTypeProvided",
            "subTypeProvided",
            "faAmount",
            "referralOutcome"
          ]
        }
      },
      "required": [
        "servicefareferral"
      ]
    },
    "servicefareferral_json": {
      "type": "object",
      "properties": {
        "servicefareferral": {
          "type": "object",
          "properties": {
            "serviceCategory": {
              "type": "integer"
            },
            "funderList": {
              "type": "integer"
            },
            "typeProvided": {
              "type": "integer"
            },
            "otherTypeProvided": {
              "type": "string"
            },
            "subTypeProvided": {
              "type": "integer"
            },
            "referralOutcome": {
              "type": "integer"
            },
            "faAmount": {
              "type": "number"
            }
          },
          "required": [
            "serviceCategory",
            "funderList",
            "typeProvided",
            "otherTypeProvided",
            "subTypeProvided",
            "referralOutcome",
            "faAmount"
          ]
        }
      },
      "required": [
        "servicefareferral"
      ]
    },
    "servicefareferrals_ids_json": {
      "type": "object",
      "properties": {
        "servicefareferrals": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "servicefareferrals": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "servicefareferralId": {
                    "type": "string"
                  },
                  "serviceCategory": {
                    "type": "integer"
                  },
                  "funderList": {
                    "type": "integer"
                  },
                  "typeProvided": {
                    "type": "integer"
                  },
                  "otherTypeProvided": {
                    "type": "string"
                  },
                  "subTypeProvided": {
                    "type": "integer"
                  },
                  "faAmount": {
                    "type": "number"
                  },
                  "referralOutcome": {
                    "type": "integer"
                  }
                },
                "required": [
                  "servicefareferralId",
                  "serviceCategory",
                  "funderList",
                  "typeProvided",
                  "otherTypeProvided",
                  "subTypeProvided",
                  "faAmount",
                  "referralOutcome"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "servicefareferrals"
          ]
        }
      },
      "required": [
        "servicefareferrals"
      ]
    },
    "sites_id_json": {
      "type": "object",
      "properties": {
        "site": {
          "type": "object",
          "properties": {
            "siteId": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "geocode": {
              "type": "integer"
            },
            "principalsite": {
              "type": "integer"
            },
            "state": {
              "type": "string"
            },
            "zip": {
              "type": "string"
            },
            "dateCreated": {
              "type": "string"
            },
            "dateUpdated": {
              "type": "string"
            }
          },
          "required": [
            "siteId",
            "address",
            "city",
            "geocode",
            "principalsite",
            "state",
            "zip",
            "dateCreated",
            "dateUpdated"
          ]
        }
      },
      "required": [
        "site"
      ]
    },
    "sites_ids_json": {
      "type": "object",
      "properties": {
        "sites": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "sites": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "siteId": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "geocode": {
                    "type": "integer"
                  },
                  "principalsite": {
                    "type": "integer"
                  },
                  "state": {
                    "type": "string"
                  },
                  "zip": {
                    "type": "string"
                  },
                  "dateCreated": {
                    "type": "string"
                  }
                },
                "required": [
                  "siteId",
                  "address",
                  "city",
                  "geocode",
                  "principalsite",
                  "state",
                  "zip",
                  "dateCreated"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "sites"
          ]
        }
      },
      "required": [
        "sites"
      ]
    },
    "sites_json": {
      "type": "object",
      "properties": {
        "site": {
          "id": "site",
          "type": "object",
          "properties": {
            "address": {
              "id": "address",
              "type": "string"
            },
            "city": {
              "id": "city",
              "type": "string"
            },
            "geocode": {
              "id": "geocode",
              "type": "integer"
            },
            "principalsite": {
              "id": "principalsite",
              "type": "integer"
            },
            "state": {
              "id": "state",
              "type": "string"
            },
            "zip": {
              "id": "zip",
              "type": "integer"
            }
          },
          "required": [
            "address",
            "city",
            "geocode",
            "principalsite",
            "state",
            "zip"
          ]
        }
      },
      "required": [
        "site"
      ]
    },
    "veteraninfo_id_json": {
      "type": "object",
      "properties": {
        "veteranInfo": {
          "type": "object",
          "properties": {
            "veteranInfoId": {
              "type": "string"
            },
            "yearEntrdService": {
              "type": "integer"
            },
            "yearSeperated": {
              "type": "integer"
            },
            "worldWar2": {
              "type": "integer"
            },
            "koreanWar": {
              "type": "integer"
            },
            "vietnamWar": {
              "type": "integer"
            },
            "desertStorm": {
              "type": "integer"
            },
            "afghanistanOef": {
              "type": "integer"
            },
            "iraqOif": {
              "type": "integer"
            },
            "iraqOnd": {
              "type": "integer"
            },
            "otherTheater": {
              "type": "integer"
            },
            "militaryBranch": {
              "type": "integer"
            },
            "dischargeStatus": {
              "type": "integer"
            }
          },
          "required": [
            "veteranInfoId",
            "yearEntrdService",
            "yearSeperated",
            "worldWar2",
            "koreanWar",
            "vietnamWar",
            "desertStorm",
            "afghanistanOef",
            "iraqOif",
            "iraqOnd",
            "otherTheater",
            "militaryBranch",
            "dischargeStatus"
          ]
        }
      },
      "required": [
        "veteranInfo"
      ]
    },
    "veteraninfo_ids_json": {
      "type": "object",
      "properties": {
        "veteranInfos": {
          "type": "object",
          "properties": {
            "pagination": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "integer"
                },
                "returned": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "maximum": {
                  "type": "integer"
                },
                "sort": {
                  "type": "object",
                  "properties": {}
                }
              },
              "required": [
                "from",
                "returned",
                "total",
                "maximum",
                "sort"
              ]
            },
            "veteranInfos": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "veteranInfoId": {
                    "type": "string"
                  },
                  "yearEntrdService": {
                    "type": "integer"
                  },
                  "yearSeperated": {
                    "type": "integer"
                  },
                  "worldWar2": {
                    "type": "integer"
                  },
                  "koreanWar": {
                    "type": "integer"
                  },
                  "vietnamWar": {
                    "type": "integer"
                  },
                  "desertStorm": {
                    "type": "integer"
                  },
                  "afghanistanOef": {
                    "type": "integer"
                  },
                  "iraqOif": {
                    "type": "integer"
                  },
                  "iraqOnd": {
                    "type": "integer"
                  },
                  "otherTheater": {
                    "type": "integer"
                  },
                  "militaryBranch": {
                    "type": "integer"
                  },
                  "dischargeStatus": {
                    "type": "integer"
                  }
                },
                "required": [
                  "veteranInfoId",
                  "yearEntrdService",
                  "yearSeperated",
                  "worldWar2",
                  "koreanWar",
                  "vietnamWar",
                  "desertStorm",
                  "afghanistanOef",
                  "iraqOif",
                  "iraqOnd",
                  "otherTheater",
                  "militaryBranch",
                  "dischargeStatus"
                ]
              }
            }
          },
          "required": [
            "pagination",
            "veteranInfos"
          ]
        }
      },
      "required": [
        "veteranInfos"
      ]
    },
    "veteraninfo_json": {
      "type": "object",
      "properties": {
        "veteranInfo": {
          "type": "object",
          "properties": {
            "yearEntrdService": {
              "type": "integer"
            },
            "yearSeperated": {
              "type": "integer"
            },
            "worldWar2": {
              "type": "integer"
            },
            "koreanWar": {
              "type": "integer"
            },
            "vietnamWar": {
              "type": "integer"
            },
            "desertStorm": {
              "type": "integer"
            },
            "afghanistanOef": {
              "type": "integer"
            },
            "iraqOif": {
              "type": "integer"
            },
            "iraqOnd": {
              "type": "integer"
            },
            "otherTheater": {
              "type": "integer"
            },
            "militaryBranch": {
              "type": "integer"
            },
            "dischargeStatus": {
              "type": "integer"
            }
          },
          "required": [
            "yearEntrdService",
            "yearSeperated",
            "worldWar2",
            "koreanWar",
            "vietnamWar",
            "desertStorm",
            "afghanistanOef",
            "iraqOif",
            "iraqOnd",
            "otherTheater",
            "militaryBranch",
            "dischargeStatus"
          ]
        }
      },
      "required": [
        "veteranInfo"
      ]
    }
  },
  "host": "www.hmislynk.com",
  "basePath": "/hmis-clientapi-v2016/rest",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ]
}
